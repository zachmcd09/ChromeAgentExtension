{"version":3,"file":"content-script.bundle.js","mappings":"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","sources":["webpack://chrome-extensions-gbt/./scripts/content-script.js"],"sourcesContent":["/**\n * ./scripts/content-script.js\n * \n * This content script runs in the context of web pages and handles DOM manipulation,\n * content extraction, and communication with the extension's background processes.\n */\n\n// Use IIFE to prevent global scope pollution\n(function() {\n    // Private state management with better synchronization\n    const state = {\n        pageLinks: [],\n        processingState: {\n            isProcessing: false,\n            lastProcessedUrl: null,\n            processingPromise: null,\n            processingProgress: 0\n        },\n        observers: {\n            mutation: null\n        }\n    };\n\n    // Enhanced debounce with proper cleanup\n    function debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            clearTimeout(timeout);\n            return new Promise(resolve => {\n                timeout = setTimeout(() => {\n                    resolve(func.apply(this, args));\n                }, wait);\n            });\n        };\n    }\n\n    /**\n     * Update processing progress\n     */\n    function updateProgress(progress, message) {\n        state.processingState.processingProgress = progress;\n        chrome.runtime.sendMessage({\n            action: \"embeddingProgress\",\n            progress: progress,\n            message: message,\n            hide: progress >= 100\n        });\n    }\n\n\n    /**\n     * Process and extract content from the current webpage\n     */\n    function processPageContent() {\n        updateProgress(10, 'Starting content processing...');\n\n        // Get the entire DOM structure\n        const domContent = document.documentElement.outerHTML;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(domContent, 'text/html');\n\n        updateProgress(20, 'Cleaning document structure...');\n\n        // Remove unwanted elements\n        const unwantedSelectors = [\n            'script', 'style', 'noscript', 'iframe', 'img',\n            'video', 'audio', 'svg', 'canvas', 'nav', 'footer',\n            'header', 'aside', '.ad', '.ads', '.advertisement',\n            '.social-share', '#comments', '.comments'\n        ];\n\n        unwantedSelectors.forEach(selector => {\n            doc.querySelectorAll(selector).forEach(el => el.remove());\n        });\n\n        updateProgress(30, 'Extracting main content...');\n\n        // Get main content\n        const mainContent = doc.querySelector('main, article, .content, #content, [role=\"main\"]');\n\n        // Initialize processed content array\n        let processedContent = [];\n\n        // Function to clean text\n        function cleanText(text) {\n            return text\n                .replace(/\\s+/g, ' ')\n                .replace(/\\n+/g, ' ')\n                .replace(/\\t+/g, ' ')\n                .replace(/\\r+/g, ' ')\n                .replace(/\\f+/g, ' ')\n                .replace(/\\v+/g, ' ')\n                .replace(/\\u00A0/g, ' ')\n                .replace(/\\u2028/g, ' ')\n                .replace(/\\u2029/g, ' ')\n                .replace(/[^\\S\\n]+/g, ' ')\n                .trim();\n        }\n\n        /**\n         * Formats a link element into the desired [LINK]...[/LINK][CONTENT]...[/CONTENT] format.\n         * @param {HTMLElement} linkElement - The link element to format.\n         * @returns {string} - The formatted link string.\n         */\n        function formatLink(linkElement) {\n            try {\n                const href = linkElement.href;\n                const text = linkElement.textContent.trim();\n\n                let precedingContext = '';\n                let prevNode = linkElement.previousSibling;\n                 while (prevNode) {\n                    if (prevNode.nodeType === Node.TEXT_NODE) {\n                        precedingContext = cleanText(prevNode.textContent);\n                        break;\n                    } else if (prevNode.nodeType === Node.ELEMENT_NODE) {\n                        // If the previous node is an element, get its outerHTML\n                        precedingContext = cleanText(prevNode.outerHTML);\n                        break;\n                    }\n                    prevNode = prevNode.previousSibling;\n                }\n\n\n                let succeedingContext = '';\n                let nextNode = linkElement.nextSibling;\n                while (nextNode) {\n                     if (nextNode.nodeType === Node.TEXT_NODE) {\n                        succeedingContext = cleanText(nextNode.textContent);\n                        break;\n                    } else if (nextNode.nodeType === Node.ELEMENT_NODE) {\n                        // If the next node is an element, get its outerHTML\n                        succeedingContext = cleanText(nextNode.outerHTML);\n                        break;\n                    }\n                    nextNode = nextNode.nextSibling;\n                }\n\n                const context = `${precedingContext} ${text} ${succeedingContext}`.trim();\n\n\n                if (!context) {\n                    console.warn(`No context found for link: ${href}`);\n                }\n\n                return `[LINK]${href}[/LINK][CONTENT]${context}[/CONTENT]`;\n            } catch (error) {\n                console.error('Error formatting link:', error, linkElement);\n                return `[LINK]${linkElement.href}[/LINK][CONTENT]${cleanText(linkElement.textContent)}[/CONTENT]`;\n            }\n        }\n\n        // Function to process each element recursively\n        function processElement(element) {\n            if (!element) return;\n            let currentParagraph = '';\n\n            for (let node of element.childNodes) {\n                if (node.nodeType === Node.TEXT_NODE) {\n                    const text = cleanText(node.textContent);\n                    if (text) {\n                        currentParagraph += (currentParagraph ? ' ' : '') + text;\n                    }\n                } else if (node.nodeType === Node.ELEMENT_NODE) {\n                    if (currentParagraph) {\n                        processedContent.push(currentParagraph);\n                        currentParagraph = '';\n                    }\n                    if (node.tagName.toLowerCase() === 'a' && node.href.startsWith('http')) {\n                        // Handle link with context using the dedicated function\n                        const formattedLink = formatLink(node);\n                        processedContent.push(formattedLink);\n                    } else {\n                        // Process other elements\n                        const tag = node.tagName.toLowerCase();\n                        const tagMap = {\n                            'div': 'div',\n                            'p': 'p',\n                            'li': 'li',\n                            'blockquote': 'blockquote',\n                            'table': 'table',\n                            'pre': 'pre',\n                            'code': 'code',\n                            'strong': 'strong',\n                            'b': 'b',\n                            'em': 'em',\n                            'i': 'i',\n                            'h1': 'h1',\n                            'h2': 'h2',\n                            'h3': 'h3',\n                            'h4': 'h4',\n                            'h5': 'h5',\n                            'h6': 'h6'\n                        };\n                        const mappedTag = tagMap[tag];\n                        if (mappedTag) {\n                            processedContent.push(`[CONTENT]${cleanText(node.outerHTML)}[/CONTENT]`);\n                        }\n                        // Recursive call\n                        processElement(node);\n                    }\n                }\n            }\n            if (currentParagraph) {\n                processedContent.push(currentParagraph);\n            }\n        }\n\n        // Special handling for Google search results\n        if (window.location.hostname === 'www.google.com' && window.location.pathname === '/search') {\n            updateProgress(40, 'Processing search results...');\n            processedContent = Array.from(document.querySelectorAll('#search .g'))\n                .map((result, index) => {\n                    const link = result.querySelector('a');\n                    const title = result.querySelector('h3');\n                    const snippet = result.querySelector('.VwiC3b');\n                    const formattedLink = link ? formatLink(link) : '';\n                    const formattedSnippet = snippet ? cleanText(snippet.textContent) : '';\n                    return `[Search Result ${index + 1}] ${title ? cleanText(title.textContent) : ''}\\n${formattedLink}\\n[CONTENT]${formattedSnippet}[/CONTENT]`;\n                })\n                .filter(result => result.trim().length > 0); // Filter out empty results\n        } else {\n            updateProgress(40, 'Processing page content...');\n            processElement(mainContent || doc.body);\n        }\n\n        updateProgress(60, 'Formatting content...');\n\n        // Combine all processed content into a single string with proper newlines\n        const combinedContent = processedContent.join('\\n').replace(/\\n{3,}/g, '\\n\\n').trim();\n\n        // Split the combined content into lines\n        const lines = combinedContent.split('\\n');\n\n        // Adjust the chunking to keep [LINK]...[/LINK][CONTENT]...[/CONTENT] together\n        const adjustedContent = [];\n        let currentChunk = '';\n\n        lines.forEach(line => {\n            if (line.startsWith('[LINK]')) {\n                // If there's existing content in currentChunk, push it before adding the link\n                if (currentChunk) {\n                    adjustedContent.push(currentChunk.trim());\n                    currentChunk = '';\n                }\n                // Push the link as a separate chunk to ensure it's not split\n                adjustedContent.push(line.trim());\n            } else {\n                // Append these formatted lines to the current chunk\n                if (currentChunk) {\n                    currentChunk += ' ' + line.trim();\n                } else {\n                    currentChunk = line.trim();\n                }\n            }\n        });\n\n        // Push any remaining content\n        if (currentChunk) {\n            adjustedContent.push(currentChunk.trim());\n        }\n\n        // Join all chunks with newlines\n        const finalContent = adjustedContent.join('\\n');\n\n        updateProgress(80, 'Finalizing content...');\n\n        return finalContent;\n    }\n\n    /**\n     * Handle clicking links by ID\n     */\n    function clickLink(linkId) {\n        const link = state.pageLinks.find(link => link.id === linkId);\n        \n        if (link && link.element) {\n            try {\n                link.element.click();\n                return { success: true };\n            } catch (error) {\n                console.error('Error clicking link:', error);\n                return { success: false, error: 'Failed to click link: ' + error.message };\n            }\n        } else {\n            return { success: false, error: \"Link not found\" };\n        }\n    }\n\n    /**\n     * Synchronized content capture and processing with retries\n     */\n    async function captureAndSendDOM(retryCount = 0, maxRetries = 3) {\n        if (state.processingState.isProcessing) {\n            console.log('Content processing already in progress...');\n            return state.processingState.processingPromise;\n        }\n    \n        const currentUrl = window.location.href;\n    \n        if (state.processingState.lastProcessedUrl === currentUrl) {\n            console.log('URL already processed. Skipping...');\n            return Promise.resolve();\n        }\n    \n        state.processingState.isProcessing = true;\n        state.processingState.processingPromise = (async () => {\n            try {\n                updateProgress(0, 'Starting content processing...');\n                const processedContent = processPageContent();\n    \n                // Send content to extension with retry logic\n                try {\n                    await new Promise((resolve, reject) => {\n                        chrome.runtime.sendMessage({\n                            action: \"processedContent\",\n                            content: processedContent,\n                            url: currentUrl\n                        }, response => {\n                            if (chrome.runtime.lastError) {\n                                reject(chrome.runtime.lastError);\n                            } else {\n                                resolve(response);\n                            }\n                        });\n                    });\n    \n                    updateProgress(100, 'Content processing complete');\n                    state.processingState.lastProcessedUrl = currentUrl;\n                    return { success: true };\n                } catch (error) {\n                    console.error('Error sending content:', error);\n                    if (retryCount < maxRetries) {\n                        console.log(`Retrying (${retryCount + 1}/${maxRetries})...`);\n                        await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));\n                        return captureAndSendDOM(retryCount + 1, maxRetries);\n                    }\n                    throw error;\n                }\n            } catch (error) {\n                console.error('Error in captureAndSendDOM:', error);\n                updateProgress(100, 'Error processing content', true);\n                return { success: false, error: error.message };\n            } finally {\n                state.processingState.isProcessing = false;\n                state.processingState.processingPromise = null;\n            }\n        })();\n    \n        return state.processingState.processingPromise;\n    }\n\n    // Debounced content processing\n    const processDOMDebounced = debounce(captureAndSendDOM, 1000);\n\n    // Message handler with proper async handling\n    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n        const handleMessage = async () => {\n            try {\n                switch (request.action) {\n                    case \"getPageContent\":\n                        return { content: processPageContent() };\n                    case \"clickLink\":\n                        return clickLink(request.linkId);\n                    case \"processPageContent\":\n                    case \"initializeContext\":\n                        return processDOMDebounced();\n                    case \"searchEmbeddings\":\n                        if (state.processingState.isProcessing) {\n                            return {\n                                success: false,\n                                error: \"Content processing in progress. Please wait...\"\n                            };\n                        }\n                        return new Promise(resolve => {\n                            chrome.runtime.sendMessage({\n                                action: \"performEmbeddingSearch\",\n                                query: request.query,\n                                url: window.location.href\n                            }, resolve);\n                        });\n                    default:\n                        return { success: false, error: \"Unknown action\" };\n                }\n            } catch (error) {\n                console.error('Error handling message:', error);\n                return { success: false, error: error.message };\n            }\n        };\n\n        // Handle async response\n        handleMessage().then(sendResponse);\n        return true;\n    });\n\n    // Initialize content processing\n    processDOMDebounced();\n\n    // Set up mutation observer for Google search results\n    if (window.location.hostname === 'www.google.com' && window.location.pathname === '/search') {\n        const handleMutations = debounce(() => {\n            if (!state.processingState.isProcessing) {\n                processDOMDebounced();\n            }\n        }, 1000);\n\n        state.observers.mutation = new MutationObserver((mutations) => {\n            if (mutations.some(mutation => \n                mutation.target.id === 'search' || \n                mutation.target.closest('#search'))) {\n                handleMutations();\n            }\n        });\n\n        state.observers.mutation.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    }\n})();\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","_arrayLikeToArray","toString","from","test","state","pageLinks","processingState","isProcessing","lastProcessedUrl","processingPromise","processingProgress","observers","mutation","debounce","func","wait","timeout","executedFunction","_this","_len","args","_key","clearTimeout","setTimeout","updateProgress","progress","message","chrome","runtime","sendMessage","action","hide","processPageContent","domContent","document","documentElement","outerHTML","parser","DOMParser","doc","parseFromString","unwantedSelectors","selector","querySelectorAll","el","remove","mainContent","querySelector","processedContent","cleanText","text","replace","trim","formatLink","linkElement","href","textContent","precedingContext","prevNode","previousSibling","nodeType","Node","TEXT_NODE","ELEMENT_NODE","succeedingContext","nextNode","nextSibling","context","concat","console","warn","error","processElement","element","currentParagraph","_iterator","childNodes","_step","node","tagName","toLowerCase","startsWith","formattedLink","tag","tagMap","mappedTag","err","window","location","hostname","pathname","map","result","index","link","title","snippet","formattedSnippet","filter","body","combinedContent","join","lines","split","adjustedContent","currentChunk","line","finalContent","clickLink","linkId","find","id","click","success","captureAndSendDOM","_captureAndSendDOM","_callee3","retryCount","maxRetries","currentUrl","_args3","_callee3$","_context3","undefined","log","_callee2","_callee2$","_context2","reject","content","url","response","lastError","t0","t1","processDOMDebounced","onMessage","addListener","request","sender","sendResponse","handleMessage","_ref","_callee","_callee$","_context","query","handleMutations","MutationObserver","mutations","some","target","closest","observe","childList","subtree"],"sourceRoot":""}