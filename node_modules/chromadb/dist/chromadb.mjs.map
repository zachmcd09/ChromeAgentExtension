{"version":3,"sources":["../src/generated/runtime.ts","../src/generated/api.ts","../src/generated/models.ts","../src/generated/configuration.ts","../src/Errors.ts","../src/Collection.ts","../src/utils.ts","../src/auth.ts","../src/ChromaFetch.ts","../src/AdminClient.ts","../src/embeddings/DefaultEmbeddingFunction.ts","../src/ChromaClient.ts","../src/CloudClient.ts","../src/embeddings/OpenAIEmbeddingFunction.ts","../src/embeddings/CohereEmbeddingFunction.ts","../src/embeddings/TransformersEmbeddingFunction.ts","../src/embeddings/HuggingFaceEmbeddingServerFunction.ts","../src/embeddings/JinaEmbeddingFunction.ts","../src/embeddings/GoogleGeminiEmbeddingFunction.ts","../src/embeddings/OllamaEmbeddingFunction.ts"],"sourcesContent":["import 'isomorphic-fetch';\n/* eslint-disable */\n// tslint:disable\n/**\n * FastAPI\n *\n *\n * OpenAPI spec version: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */\n\nexport const defaultFetch = fetch;\nimport { Configuration } from \"./configuration\";\n\nexport const BASE_PATH = \"\";\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n\tcsv: \",\",\n\tssv: \" \",\n\ttsv: \"\\t\",\n\tpipes: \"|\",\n};\n\n/**\n *\n * @export\n * @type FetchAPI\n */\nexport type FetchAPI = typeof defaultFetch;\n\n/**\n *\n * @export\n * @interface FetchArgs\n */\nexport interface FetchArgs {\n\turl: string;\n\toptions: RequestInit;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n\tprotected configuration?: Configuration;\n\n\tconstructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = defaultFetch) {\n\t\tif (configuration) {\n\t\t\tthis.configuration = configuration;\n\t\t\tthis.basePath = configuration.basePath || this.basePath;\n\t\t}\n\t}\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n\tconstructor(public field: string, msg?: string) {\n\t\tsuper(msg);\n\t\tObject.setPrototypeOf(this, RequiredError.prototype);\n\t\tthis.name = \"RequiredError\";\n\t}\n}\n","/* eslint-disable */\n// tslint:disable\n/**\n * FastAPI\n *\n *\n * OpenAPI spec version: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */\n\nimport { Configuration } from \"./configuration\";\nimport { BASE_PATH, COLLECTION_FORMATS, FetchAPI, FetchArgs, BaseAPI, RequiredError, defaultFetch } from \"./runtime\";\nimport { Api } from \"./models\";\n\nexport type FactoryFunction<T> = (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) => T;\n\n/**\n * ApiApi - fetch parameter creator\n * @export\n */\nexport const ApiApiFetchParamCreator = function (configuration?: Configuration) {\n\treturn {\n\t\t/**\n\t\t * @summary Add\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionId\n\t\t * @param {Api.AddEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tadd(tenant: string, databaseName: string, collectionId: string, request: Api.AddEmbedding, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling add.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling add.');\n\t\t\t}\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling add.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling add.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/add`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)))\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Add V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.AddEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\taddV1(collectionId: string, request: Api.AddEmbedding, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling addV1.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling addV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/collections/{collection_id}/add`\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Delete\n\t\t * @param {string} collectionId\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {Api.DeleteEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\taDelete(collectionId: string, tenant: string, databaseName: string, request: Api.DeleteEmbedding, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling aDelete.');\n\t\t\t}\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling aDelete.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling aDelete.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling aDelete.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/delete`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)))\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get\n\t\t * @param {string} collectionId\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {Api.GetEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\taGet(collectionId: string, tenant: string, databaseName: string, request: Api.GetEmbedding, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling aGet.');\n\t\t\t}\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling aGet.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling aGet.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling aGet.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/get`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)))\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Count\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionId\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcount(tenant: string, databaseName: string, collectionId: string, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling count.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling count.');\n\t\t\t}\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling count.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/count`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)))\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Count Collections\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcountCollections(tenant: string, databaseName: string, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling countCollections.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling countCollections.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections_count`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Count Collections V1\n\t\t * @param {string} [tenant]\n\t\t * @param {string} [database]\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcountCollectionsV1(tenant: string | undefined, database: string | undefined, options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v1/count_collections`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tif (tenant !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('tenant', String(tenant));\n\t\t\t}\n\n\t\t\tif (database !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('database', String(database));\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Count V1\n\t\t * @param {string} collectionId\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcountV1(collectionId: string, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling countV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/collections/{collection_id}/count`\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Create Collection\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {Api.CreateCollection} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcreateCollection(tenant: string, databaseName: string, request: Api.CreateCollection, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling createCollection.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling createCollection.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling createCollection.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Create Collection V1\n\t\t * @param {string} [tenant]\n\t\t * @param {string} [database]\n\t\t * @param {Api.CreateCollection} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcreateCollectionV1(tenant: string | undefined, database: string | undefined, request: Api.CreateCollection, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling createCollectionV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/collections`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tif (tenant !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('tenant', String(tenant));\n\t\t\t}\n\n\t\t\tif (database !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('database', String(database));\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Create Database\n\t\t * @param {string} tenant\n\t\t * @param {Api.CreateDatabase} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcreateDatabase(tenant: string, request: Api.CreateDatabase, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling createDatabase.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling createDatabase.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Create Database V1\n\t\t * @param {string} [tenant]\n\t\t * @param {Api.CreateDatabase} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcreateDatabaseV1(tenant: string | undefined, request: Api.CreateDatabase, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling createDatabaseV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/databases`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tif (tenant !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('tenant', String(tenant));\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Create Tenant\n\t\t * @param {Api.CreateTenant} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcreateTenant(request: Api.CreateTenant, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling createTenant.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Create Tenant V1\n\t\t * @param {Api.CreateTenant} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcreateTenantV1(request: Api.CreateTenant, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling createTenantV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/tenants`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Delete Collection\n\t\t * @param {string} collectionName\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tdeleteCollection(collectionName: string, tenant: string, databaseName: string, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionName' is not null or undefined\n\t\t\tif (collectionName === null || collectionName === undefined) {\n\t\t\t\tthrow new RequiredError('collectionName', 'Required parameter collectionName was null or undefined when calling deleteCollection.');\n\t\t\t}\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling deleteCollection.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling deleteCollection.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_name}`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)))\n\t\t\t\t.replace('{collection_name}', encodeURIComponent(String(collectionName)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'DELETE' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Delete Collection V1\n\t\t * @param {string} collectionName\n\t\t * @param {string} [tenant]\n\t\t * @param {string} [database]\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tdeleteCollectionV1(collectionName: string, tenant: string | undefined, database: string | undefined, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionName' is not null or undefined\n\t\t\tif (collectionName === null || collectionName === undefined) {\n\t\t\t\tthrow new RequiredError('collectionName', 'Required parameter collectionName was null or undefined when calling deleteCollectionV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/collections/{collection_name}`\n\t\t\t\t.replace('{collection_name}', encodeURIComponent(String(collectionName)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'DELETE' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tif (tenant !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('tenant', String(tenant));\n\t\t\t}\n\n\t\t\tif (database !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('database', String(database));\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Delete V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.DeleteEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tdeleteV1(collectionId: string, request: Api.DeleteEmbedding, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling deleteV1.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling deleteV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/collections/{collection_id}/delete`\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Collection\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionName\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetCollection(tenant: string, databaseName: string, collectionName: string, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling getCollection.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling getCollection.');\n\t\t\t}\n\t\t\t// verify required parameter 'collectionName' is not null or undefined\n\t\t\tif (collectionName === null || collectionName === undefined) {\n\t\t\t\tthrow new RequiredError('collectionName', 'Required parameter collectionName was null or undefined when calling getCollection.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_name}`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)))\n\t\t\t\t.replace('{collection_name}', encodeURIComponent(String(collectionName)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Collection V1\n\t\t * @param {string} collectionName\n\t\t * @param {string} [tenant]\n\t\t * @param {string} [database]\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetCollectionV1(collectionName: string, tenant: string | undefined, database: string | undefined, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionName' is not null or undefined\n\t\t\tif (collectionName === null || collectionName === undefined) {\n\t\t\t\tthrow new RequiredError('collectionName', 'Required parameter collectionName was null or undefined when calling getCollectionV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/collections/{collection_name}`\n\t\t\t\t.replace('{collection_name}', encodeURIComponent(String(collectionName)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tif (tenant !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('tenant', String(tenant));\n\t\t\t}\n\n\t\t\tif (database !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('database', String(database));\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Database\n\t\t * @param {string} databaseName\n\t\t * @param {string} tenant\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetDatabase(databaseName: string, tenant: string, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling getDatabase.');\n\t\t\t}\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling getDatabase.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Database V1\n\t\t * @param {string} database\n\t\t * @param {string} [tenant]\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetDatabaseV1(database: string, tenant: string | undefined, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'database' is not null or undefined\n\t\t\tif (database === null || database === undefined) {\n\t\t\t\tthrow new RequiredError('database', 'Required parameter database was null or undefined when calling getDatabaseV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/databases/{database}`\n\t\t\t\t.replace('{database}', encodeURIComponent(String(database)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tif (tenant !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('tenant', String(tenant));\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Nearest Neighbors\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionId\n\t\t * @param {Api.QueryEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetNearestNeighbors(tenant: string, databaseName: string, collectionId: string, request: Api.QueryEmbedding, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling getNearestNeighbors.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling getNearestNeighbors.');\n\t\t\t}\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling getNearestNeighbors.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling getNearestNeighbors.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/query`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)))\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Nearest Neighbors V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.QueryEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetNearestNeighborsV1(collectionId: string, request: Api.QueryEmbedding, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling getNearestNeighborsV1.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling getNearestNeighborsV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/collections/{collection_id}/query`\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Tenant\n\t\t * @param {string} tenant\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetTenant(tenant: string, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling getTenant.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Tenant V1\n\t\t * @param {string} tenant\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetTenantV1(tenant: string, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling getTenantV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/tenants/{tenant}`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get User Identity\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetUserIdentity(options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v2/auth/identity`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Root\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV11(options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v1`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.GetEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV12(collectionId: string, request: Api.GetEmbedding, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling getV12.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling getV12.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/collections/{collection_id}/get`\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Heartbeat\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV1Heartbeat(options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v1/heartbeat`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Pre Flight Checks\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV1PreFlightChecks(options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v1/pre-flight-checks`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Version\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV1Version(options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v1/version`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Root\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV2(options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v2`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Heartbeat\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV2Heartbeat(options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v2/heartbeat`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Pre Flight Checks\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV2PreFlightChecks(options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v2/pre-flight-checks`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Version\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV2Version(options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v2/version`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary List Collections\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {number | null} [limit]\n\t\t * @param {number | null} [offset]\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tlistCollections(tenant: string, databaseName: string, limit: number | null | undefined, offset: number | null | undefined, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling listCollections.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling listCollections.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tif (limit !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('limit', String(limit));\n\t\t\t}\n\n\t\t\tif (offset !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('offset', String(offset));\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary List Collections V1\n\t\t * @param {number | null} [limit]\n\t\t * @param {number | null} [offset]\n\t\t * @param {string} [tenant]\n\t\t * @param {string} [database]\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tlistCollectionsV1(limit: number | null | undefined, offset: number | null | undefined, tenant: string | undefined, database: string | undefined, options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v1/collections`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'GET' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tif (limit !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('limit', String(limit));\n\t\t\t}\n\n\t\t\tif (offset !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('offset', String(offset));\n\t\t\t}\n\n\t\t\tif (tenant !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('tenant', String(tenant));\n\t\t\t}\n\n\t\t\tif (database !== undefined) {\n\t\t\t\tlocalVarQueryParameter.append('database', String(database));\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Reset\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tpostV1Reset(options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v1/reset`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Reset\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tpostV2Reset(options: RequestInit = {}): FetchArgs {\n\t\t\tlet localVarPath = `/api/v2/reset`;\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Update\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionId\n\t\t * @param {Api.UpdateEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tupdate(tenant: string, databaseName: string, collectionId: string, request: Api.UpdateEmbedding, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling update.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling update.');\n\t\t\t}\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling update.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling update.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/update`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)))\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Update Collection\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionId\n\t\t * @param {Api.UpdateCollection} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tupdateCollection(tenant: string, databaseName: string, collectionId: string, request: Api.UpdateCollection, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling updateCollection.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling updateCollection.');\n\t\t\t}\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling updateCollection.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling updateCollection.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)))\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'PUT' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Update Collection V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.UpdateCollection} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tupdateCollectionV1(collectionId: string, request: Api.UpdateCollection, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling updateCollectionV1.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling updateCollectionV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/collections/{collection_id}`\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'PUT' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Update V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.UpdateEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tupdateV1(collectionId: string, request: Api.UpdateEmbedding, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling updateV1.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling updateV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/collections/{collection_id}/update`\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Upsert\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionId\n\t\t * @param {Api.AddEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tupsert(tenant: string, databaseName: string, collectionId: string, request: Api.AddEmbedding, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'tenant' is not null or undefined\n\t\t\tif (tenant === null || tenant === undefined) {\n\t\t\t\tthrow new RequiredError('tenant', 'Required parameter tenant was null or undefined when calling upsert.');\n\t\t\t}\n\t\t\t// verify required parameter 'databaseName' is not null or undefined\n\t\t\tif (databaseName === null || databaseName === undefined) {\n\t\t\t\tthrow new RequiredError('databaseName', 'Required parameter databaseName was null or undefined when calling upsert.');\n\t\t\t}\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling upsert.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling upsert.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/upsert`\n\t\t\t\t.replace('{tenant}', encodeURIComponent(String(tenant)))\n\t\t\t\t.replace('{database_name}', encodeURIComponent(String(databaseName)))\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Upsert V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.AddEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tupsertV1(collectionId: string, request: Api.AddEmbedding, options: RequestInit = {}): FetchArgs {\n\t\t\t// verify required parameter 'collectionId' is not null or undefined\n\t\t\tif (collectionId === null || collectionId === undefined) {\n\t\t\t\tthrow new RequiredError('collectionId', 'Required parameter collectionId was null or undefined when calling upsertV1.');\n\t\t\t}\n\t\t\t// verify required parameter 'request' is not null or undefined\n\t\t\tif (request === null || request === undefined) {\n\t\t\t\tthrow new RequiredError('request', 'Required parameter request was null or undefined when calling upsertV1.');\n\t\t\t}\n\t\t\tlet localVarPath = `/api/v1/collections/{collection_id}/upsert`\n\t\t\t\t.replace('{collection_id}', encodeURIComponent(String(collectionId)));\n\t\t\tconst localVarPathQueryStart = localVarPath.indexOf(\"?\");\n\t\t\tconst localVarRequestOptions: RequestInit = Object.assign({ method: 'POST' }, options);\n\t\t\tconst localVarHeaderParameter: Headers = options.headers ? new Headers(options.headers) : new Headers();\n\t\t\tconst localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : \"\");\n\t\t\tif (localVarPathQueryStart !== -1) {\n\t\t\t\tlocalVarPath = localVarPath.substring(0, localVarPathQueryStart);\n\t\t\t}\n\n\t\t\tlocalVarHeaderParameter.set('Content-Type', 'application/json');\n\n\t\t\tlocalVarRequestOptions.headers = localVarHeaderParameter;\n\n\t\t\tif (request !== undefined) {\n\t\t\t\tlocalVarRequestOptions.body = JSON.stringify(request || {});\n\t\t\t}\n\n\t\t\tconst localVarQueryParameterString = localVarQueryParameter.toString();\n\t\t\tif (localVarQueryParameterString) {\n\t\t\t\tlocalVarPath += \"?\" + localVarQueryParameterString;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\turl: localVarPath,\n\t\t\t\toptions: localVarRequestOptions,\n\t\t\t};\n\t\t},\n\t}\n};\n\n/**\n * ApiApi - functional programming interface\n * @export\n */\nexport const ApiApiFp = function(configuration?: Configuration) {\n\treturn {\n\t\t/**\n\t\t * @summary Add\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionId\n\t\t * @param {Api.AddEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tadd(tenant: string, databaseName: string, collectionId: string, request: Api.AddEmbedding, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.Add201Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).add(tenant, databaseName, collectionId, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 201) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Add V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.AddEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\taddV1(collectionId: string, request: Api.AddEmbedding, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.AddV1201Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).addV1(collectionId, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 201) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Delete\n\t\t * @param {string} collectionId\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {Api.DeleteEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\taDelete(collectionId: string, tenant: string, databaseName: string, request: Api.DeleteEmbedding, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.ADelete200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).aDelete(collectionId, tenant, databaseName, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get\n\t\t * @param {string} collectionId\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {Api.GetEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\taGet(collectionId: string, tenant: string, databaseName: string, request: Api.GetEmbedding, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.AGet200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).aGet(collectionId, tenant, databaseName, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Count\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionId\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcount(tenant: string, databaseName: string, collectionId: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.Count200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).count(tenant, databaseName, collectionId, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Count Collections\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcountCollections(tenant: string, databaseName: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.CountCollections200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).countCollections(tenant, databaseName, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Count Collections V1\n\t\t * @param {string} [tenant]\n\t\t * @param {string} [database]\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcountCollectionsV1(tenant: string | undefined, database: string | undefined, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.CountCollectionsV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).countCollectionsV1(tenant, database, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Count V1\n\t\t * @param {string} collectionId\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcountV1(collectionId: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.CountV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).countV1(collectionId, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Create Collection\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {Api.CreateCollection} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcreateCollection(tenant: string, databaseName: string, request: Api.CreateCollection, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.CreateCollection200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).createCollection(tenant, databaseName, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Create Collection V1\n\t\t * @param {string} [tenant]\n\t\t * @param {string} [database]\n\t\t * @param {Api.CreateCollection} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcreateCollectionV1(tenant: string | undefined, database: string | undefined, request: Api.CreateCollection, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.CreateCollectionV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).createCollectionV1(tenant, database, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Create Database\n\t\t * @param {string} tenant\n\t\t * @param {Api.CreateDatabase} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcreateDatabase(tenant: string, request: Api.CreateDatabase, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.CreateDatabase200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).createDatabase(tenant, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Create Database V1\n\t\t * @param {string} [tenant]\n\t\t * @param {Api.CreateDatabase} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcreateDatabaseV1(tenant: string | undefined, request: Api.CreateDatabase, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.CreateDatabaseV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).createDatabaseV1(tenant, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Create Tenant\n\t\t * @param {Api.CreateTenant} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcreateTenant(request: Api.CreateTenant, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.CreateTenant200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).createTenant(request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Create Tenant V1\n\t\t * @param {Api.CreateTenant} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tcreateTenantV1(request: Api.CreateTenant, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.CreateTenantV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).createTenantV1(request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Delete Collection\n\t\t * @param {string} collectionName\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tdeleteCollection(collectionName: string, tenant: string, databaseName: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.DeleteCollection200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).deleteCollection(collectionName, tenant, databaseName, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Delete Collection V1\n\t\t * @param {string} collectionName\n\t\t * @param {string} [tenant]\n\t\t * @param {string} [database]\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tdeleteCollectionV1(collectionName: string, tenant: string | undefined, database: string | undefined, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.DeleteCollectionV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).deleteCollectionV1(collectionName, tenant, database, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Delete V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.DeleteEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tdeleteV1(collectionId: string, request: Api.DeleteEmbedding, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.DeleteV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).deleteV1(collectionId, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Collection\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionName\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetCollection(tenant: string, databaseName: string, collectionName: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.GetCollection200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getCollection(tenant, databaseName, collectionName, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Collection V1\n\t\t * @param {string} collectionName\n\t\t * @param {string} [tenant]\n\t\t * @param {string} [database]\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetCollectionV1(collectionName: string, tenant: string | undefined, database: string | undefined, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.GetCollectionV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getCollectionV1(collectionName, tenant, database, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Database\n\t\t * @param {string} databaseName\n\t\t * @param {string} tenant\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetDatabase(databaseName: string, tenant: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.GetDatabase200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getDatabase(databaseName, tenant, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Database V1\n\t\t * @param {string} database\n\t\t * @param {string} [tenant]\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetDatabaseV1(database: string, tenant: string | undefined, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.GetDatabaseV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getDatabaseV1(database, tenant, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Nearest Neighbors\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionId\n\t\t * @param {Api.QueryEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetNearestNeighbors(tenant: string, databaseName: string, collectionId: string, request: Api.QueryEmbedding, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.GetNearestNeighbors200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getNearestNeighbors(tenant, databaseName, collectionId, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Nearest Neighbors V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.QueryEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetNearestNeighborsV1(collectionId: string, request: Api.QueryEmbedding, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.GetNearestNeighborsV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getNearestNeighborsV1(collectionId, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Tenant\n\t\t * @param {string} tenant\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetTenant(tenant: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.GetTenant200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getTenant(tenant, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get Tenant V1\n\t\t * @param {string} tenant\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetTenantV1(tenant: string, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.GetTenantV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getTenantV1(tenant, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get User Identity\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetUserIdentity(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.GetUserIdentity200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getUserIdentity(options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Root\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV11(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<{ [name: string]: number }> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV11(options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Get V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.GetEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV12(collectionId: string, request: Api.GetEmbedding, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.GetV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV12(collectionId, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Heartbeat\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV1Heartbeat(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<{ [name: string]: number }> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV1Heartbeat(options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Pre Flight Checks\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV1PreFlightChecks(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.PreFlightChecks200Response2> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV1PreFlightChecks(options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Version\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV1Version(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV1Version(options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Root\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV2(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<{ [name: string]: number }> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV2(options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Heartbeat\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV2Heartbeat(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<{ [name: string]: number }> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV2Heartbeat(options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Pre Flight Checks\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV2PreFlightChecks(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.PreFlightChecks200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV2PreFlightChecks(options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Version\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tgetV2Version(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV2Version(options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary List Collections\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {number | null} [limit]\n\t\t * @param {number | null} [offset]\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tlistCollections(tenant: string, databaseName: string, limit: number | null | undefined, offset: number | null | undefined, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.ListCollections200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).listCollections(tenant, databaseName, limit, offset, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary List Collections V1\n\t\t * @param {number | null} [limit]\n\t\t * @param {number | null} [offset]\n\t\t * @param {string} [tenant]\n\t\t * @param {string} [database]\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tlistCollectionsV1(limit: number | null | undefined, offset: number | null | undefined, tenant: string | undefined, database: string | undefined, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.ListCollectionsV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).listCollectionsV1(limit, offset, tenant, database, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Reset\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tpostV1Reset(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).postV1Reset(options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Reset\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tpostV2Reset(options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).postV2Reset(options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Update\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionId\n\t\t * @param {Api.UpdateEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tupdate(tenant: string, databaseName: string, collectionId: string, request: Api.UpdateEmbedding, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.Update200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).update(tenant, databaseName, collectionId, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Update Collection\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionId\n\t\t * @param {Api.UpdateCollection} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tupdateCollection(tenant: string, databaseName: string, collectionId: string, request: Api.UpdateCollection, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.UpdateCollection200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).updateCollection(tenant, databaseName, collectionId, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Update Collection V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.UpdateCollection} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tupdateCollectionV1(collectionId: string, request: Api.UpdateCollection, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.UpdateCollectionV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).updateCollectionV1(collectionId, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Update V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.UpdateEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tupdateV1(collectionId: string, request: Api.UpdateEmbedding, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.UpdateV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).updateV1(collectionId, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Upsert\n\t\t * @param {string} tenant\n\t\t * @param {string} databaseName\n\t\t * @param {string} collectionId\n\t\t * @param {Api.AddEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tupsert(tenant: string, databaseName: string, collectionId: string, request: Api.AddEmbedding, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.Upsert200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).upsert(tenant, databaseName, collectionId, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * @summary Upsert V1\n\t\t * @param {string} collectionId\n\t\t * @param {Api.AddEmbedding} request\n\t\t * @param {RequestInit} [options] Override http request option.\n\t\t * @throws {RequiredError}\n\t\t */\n\t\tupsertV1(collectionId: string, request: Api.AddEmbedding, options?: RequestInit): (fetch?: FetchAPI, basePath?: string) => Promise<Api.UpsertV1200Response> {\n\t\t\tconst localVarFetchArgs = ApiApiFetchParamCreator(configuration).upsertV1(collectionId, request, options);\n\t\t\treturn (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n\t\t\t\treturn fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n\t\t\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\t\t\tconst mimeType = contentType ? contentType.replace(/;.*/, '') : undefined;\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\treturn response.json() as any;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.status === 422) {\n\t\t\t\t\t\tif (mimeType === 'application/json') {\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow response;\n\t\t\t\t\t}\n\t\t\t\t\tthrow response;\n\t\t\t\t});\n\t\t\t};\n\t\t},\n\t}\n};\n\n/**\n * ApiApi - factory interface\n * @export\n */\nexport const ApiApiFactory: FactoryFunction<ApiApi> = function (configuration?: Configuration, basePath?: string, fetch?: FetchAPI) {\n\treturn new ApiApi(configuration, basePath, fetch);\n};\n\n/**\n * ApiApi - object-oriented interface\n * @export\n * @class ApiApi\n * @extends {BaseAPI}\n */\nexport class ApiApi extends BaseAPI {\n\t/**\n\t * @summary Add\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {string} collectionId\n\t * @param {Api.AddEmbedding} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic add(tenant: string, databaseName: string, collectionId: string, request: Api.AddEmbedding, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).add(tenant, databaseName, collectionId, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Add V1\n\t * @param {string} collectionId\n\t * @param {Api.AddEmbedding} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic addV1(collectionId: string, request: Api.AddEmbedding, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).addV1(collectionId, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Delete\n\t * @param {string} collectionId\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {Api.DeleteEmbedding} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic aDelete(collectionId: string, tenant: string, databaseName: string, request: Api.DeleteEmbedding, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).aDelete(collectionId, tenant, databaseName, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Get\n\t * @param {string} collectionId\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {Api.GetEmbedding} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic aGet(collectionId: string, tenant: string, databaseName: string, request: Api.GetEmbedding, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).aGet(collectionId, tenant, databaseName, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Count\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {string} collectionId\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic count(tenant: string, databaseName: string, collectionId: string, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).count(tenant, databaseName, collectionId, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Count Collections\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic countCollections(tenant: string, databaseName: string, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).countCollections(tenant, databaseName, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Count Collections V1\n\t * @param {string} [tenant]\n\t * @param {string} [database]\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic countCollectionsV1(tenant: string | undefined, database: string | undefined, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).countCollectionsV1(tenant, database, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Count V1\n\t * @param {string} collectionId\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic countV1(collectionId: string, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).countV1(collectionId, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Create Collection\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {Api.CreateCollection} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic createCollection(tenant: string, databaseName: string, request: Api.CreateCollection, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).createCollection(tenant, databaseName, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Create Collection V1\n\t * @param {string} [tenant]\n\t * @param {string} [database]\n\t * @param {Api.CreateCollection} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic createCollectionV1(tenant: string | undefined, database: string | undefined, request: Api.CreateCollection, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).createCollectionV1(tenant, database, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Create Database\n\t * @param {string} tenant\n\t * @param {Api.CreateDatabase} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic createDatabase(tenant: string, request: Api.CreateDatabase, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).createDatabase(tenant, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Create Database V1\n\t * @param {string} [tenant]\n\t * @param {Api.CreateDatabase} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic createDatabaseV1(tenant: string | undefined, request: Api.CreateDatabase, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).createDatabaseV1(tenant, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Create Tenant\n\t * @param {Api.CreateTenant} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic createTenant(request: Api.CreateTenant, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).createTenant(request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Create Tenant V1\n\t * @param {Api.CreateTenant} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic createTenantV1(request: Api.CreateTenant, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).createTenantV1(request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Delete Collection\n\t * @param {string} collectionName\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic deleteCollection(collectionName: string, tenant: string, databaseName: string, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).deleteCollection(collectionName, tenant, databaseName, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Delete Collection V1\n\t * @param {string} collectionName\n\t * @param {string} [tenant]\n\t * @param {string} [database]\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic deleteCollectionV1(collectionName: string, tenant: string | undefined, database: string | undefined, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).deleteCollectionV1(collectionName, tenant, database, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Delete V1\n\t * @param {string} collectionId\n\t * @param {Api.DeleteEmbedding} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic deleteV1(collectionId: string, request: Api.DeleteEmbedding, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).deleteV1(collectionId, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Get Collection\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {string} collectionName\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getCollection(tenant: string, databaseName: string, collectionName: string, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getCollection(tenant, databaseName, collectionName, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Get Collection V1\n\t * @param {string} collectionName\n\t * @param {string} [tenant]\n\t * @param {string} [database]\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getCollectionV1(collectionName: string, tenant: string | undefined, database: string | undefined, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getCollectionV1(collectionName, tenant, database, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Get Database\n\t * @param {string} databaseName\n\t * @param {string} tenant\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getDatabase(databaseName: string, tenant: string, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getDatabase(databaseName, tenant, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Get Database V1\n\t * @param {string} database\n\t * @param {string} [tenant]\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getDatabaseV1(database: string, tenant: string | undefined, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getDatabaseV1(database, tenant, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Get Nearest Neighbors\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {string} collectionId\n\t * @param {Api.QueryEmbedding} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getNearestNeighbors(tenant: string, databaseName: string, collectionId: string, request: Api.QueryEmbedding, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getNearestNeighbors(tenant, databaseName, collectionId, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Get Nearest Neighbors V1\n\t * @param {string} collectionId\n\t * @param {Api.QueryEmbedding} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getNearestNeighborsV1(collectionId: string, request: Api.QueryEmbedding, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getNearestNeighborsV1(collectionId, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Get Tenant\n\t * @param {string} tenant\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getTenant(tenant: string, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getTenant(tenant, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Get Tenant V1\n\t * @param {string} tenant\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getTenantV1(tenant: string, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getTenantV1(tenant, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Get User Identity\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getUserIdentity(options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getUserIdentity(options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Root\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getV11(options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getV11(options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Get V1\n\t * @param {string} collectionId\n\t * @param {Api.GetEmbedding} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getV12(collectionId: string, request: Api.GetEmbedding, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getV12(collectionId, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Heartbeat\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getV1Heartbeat(options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getV1Heartbeat(options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Pre Flight Checks\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getV1PreFlightChecks(options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getV1PreFlightChecks(options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Version\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getV1Version(options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getV1Version(options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Root\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getV2(options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getV2(options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Heartbeat\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getV2Heartbeat(options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getV2Heartbeat(options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Pre Flight Checks\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getV2PreFlightChecks(options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getV2PreFlightChecks(options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Version\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic getV2Version(options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).getV2Version(options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary List Collections\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {number | null} [limit]\n\t * @param {number | null} [offset]\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic listCollections(tenant: string, databaseName: string, limit: number | null | undefined, offset: number | null | undefined, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).listCollections(tenant, databaseName, limit, offset, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary List Collections V1\n\t * @param {number | null} [limit]\n\t * @param {number | null} [offset]\n\t * @param {string} [tenant]\n\t * @param {string} [database]\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic listCollectionsV1(limit: number | null | undefined, offset: number | null | undefined, tenant: string | undefined, database: string | undefined, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).listCollectionsV1(limit, offset, tenant, database, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Reset\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic postV1Reset(options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).postV1Reset(options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Reset\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic postV2Reset(options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).postV2Reset(options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Update\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {string} collectionId\n\t * @param {Api.UpdateEmbedding} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic update(tenant: string, databaseName: string, collectionId: string, request: Api.UpdateEmbedding, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).update(tenant, databaseName, collectionId, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Update Collection\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {string} collectionId\n\t * @param {Api.UpdateCollection} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic updateCollection(tenant: string, databaseName: string, collectionId: string, request: Api.UpdateCollection, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).updateCollection(tenant, databaseName, collectionId, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Update Collection V1\n\t * @param {string} collectionId\n\t * @param {Api.UpdateCollection} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic updateCollectionV1(collectionId: string, request: Api.UpdateCollection, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).updateCollectionV1(collectionId, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Update V1\n\t * @param {string} collectionId\n\t * @param {Api.UpdateEmbedding} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic updateV1(collectionId: string, request: Api.UpdateEmbedding, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).updateV1(collectionId, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Upsert\n\t * @param {string} tenant\n\t * @param {string} databaseName\n\t * @param {string} collectionId\n\t * @param {Api.AddEmbedding} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic upsert(tenant: string, databaseName: string, collectionId: string, request: Api.AddEmbedding, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).upsert(tenant, databaseName, collectionId, request, options)(this.fetch, this.basePath);\n\t}\n\n\t/**\n\t * @summary Upsert V1\n\t * @param {string} collectionId\n\t * @param {Api.AddEmbedding} request\n\t * @param {RequestInit} [options] Override http request option.\n\t * @throws {RequiredError}\n\t */\n\tpublic upsertV1(collectionId: string, request: Api.AddEmbedding, options?: RequestInit) {\n\t\treturn ApiApiFp(this.configuration).upsertV1(collectionId, request, options)(this.fetch, this.basePath);\n\t}\n\n}\n\n/**\n * We sometimes represent dates as strings (in models) and as Dates (in parameters) so this\n * function converts them both to a string.\n */\nfunction dateToString(value: Date | string | undefined): string | undefined {\n\tif (value instanceof Date) {\n\t\treturn value.toISOString();\n\t} else if (typeof value === 'string') {\n\t\treturn value;\n\t} else {\n\t\treturn undefined;\n\t}\n}\n","/* eslint-disable */\n// tslint:disable\n/**\n * FastAPI\n *\n *\n * OpenAPI spec version: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */\n\nexport namespace Api {\n\texport interface Add201Response {\n\t}\n\n\texport interface AddEmbedding {\n\t\tembeddings?: (Api.AddEmbedding.Embedding[]) | null;\n\t\tmetadatas?: ((Api.AddEmbedding.Metadatum | null)[]) | null;\n\t\tdocuments?: ((string | null)[]) | null;\n\t\turis?: ((string | null)[]) | null;\n\t\tids: string[];\n\t}\n\n\t/**\n\t * @export\n\t * @namespace AddEmbedding\n\t */\n\texport namespace AddEmbedding {\n\t\texport interface Embedding {\n\t\t}\n\n\t\texport interface Metadatum {\n\t\t}\n\n\t}\n\n\texport interface AddV1201Response {\n\t}\n\n\texport interface ADelete200Response {\n\t}\n\n\texport interface AGet200Response {\n\t}\n\n\texport interface Count200Response {\n\t}\n\n\texport interface CountCollections200Response {\n\t}\n\n\texport interface CountCollectionsV1200Response {\n\t}\n\n\texport interface CountV1200Response {\n\t}\n\n\texport interface CreateCollection {\n\t\tname: string;\n\t\tconfiguration?: Api.CreateCollection.Configuration | null;\n\t\tmetadata?: Api.CreateCollection.Metadata | null;\n\t\t'get_or_create'?: boolean;\n\t}\n\n\t/**\n\t * @export\n\t * @namespace CreateCollection\n\t */\n\texport namespace CreateCollection {\n\t\texport interface Configuration {\n\t\t}\n\n\t\texport interface Metadata {\n\t\t}\n\n\t}\n\n\texport interface CreateCollection200Response {\n\t}\n\n\texport interface CreateCollectionV1200Response {\n\t}\n\n\texport interface CreateDatabase {\n\t\tname: string;\n\t}\n\n\texport interface CreateDatabase200Response {\n\t}\n\n\texport interface CreateDatabaseV1200Response {\n\t}\n\n\texport interface CreateTenant {\n\t\tname: string;\n\t}\n\n\texport interface CreateTenant200Response {\n\t}\n\n\texport interface CreateTenantV1200Response {\n\t}\n\n\texport interface DeleteCollection200Response {\n\t}\n\n\texport interface DeleteCollectionV1200Response {\n\t}\n\n\texport interface DeleteEmbedding {\n\t\tids?: (string[]) | null;\n\t\twhere?: Api.DeleteEmbedding.Where | null;\n\t\t'where_document'?: Api.DeleteEmbedding.WhereDocument | null;\n\t}\n\n\t/**\n\t * @export\n\t * @namespace DeleteEmbedding\n\t */\n\texport namespace DeleteEmbedding {\n\t\texport interface Where {\n\t\t}\n\n\t\texport interface WhereDocument {\n\t\t}\n\n\t}\n\n\texport interface DeleteV1200Response {\n\t}\n\n\texport interface GetCollection200Response {\n\t}\n\n\texport interface GetCollectionV1200Response {\n\t}\n\n\texport interface GetDatabase200Response {\n\t}\n\n\texport interface GetDatabaseV1200Response {\n\t}\n\n\texport interface GetEmbedding {\n\t\tids?: (string[]) | null;\n\t\twhere?: Api.GetEmbedding.Where | null;\n\t\t'where_document'?: Api.GetEmbedding.WhereDocument | null;\n\t\tsort?: string | null;\n\t\t/**\n\t\t * @type {number | null}\n\t\t * @memberof GetEmbedding\n\t\t */\n\t\tlimit?: number | null;\n\t\t/**\n\t\t * @type {number | null}\n\t\t * @memberof GetEmbedding\n\t\t */\n\t\toffset?: number | null;\n\t\tinclude?: Api.IncludeEnum[];\n\t}\n\n\t/**\n\t * @export\n\t * @namespace GetEmbedding\n\t */\n\texport namespace GetEmbedding {\n\t\texport interface Where {\n\t\t}\n\n\t\texport interface WhereDocument {\n\t\t}\n\n\t}\n\n\texport interface GetNearestNeighbors200Response {\n\t}\n\n\texport interface GetNearestNeighborsV1200Response {\n\t}\n\n\texport interface GetTenant200Response {\n\t}\n\n\texport interface GetTenantV1200Response {\n\t}\n\n\texport interface GetUserIdentity200Response {\n\t}\n\n\texport interface GetV1200Response {\n\t}\n\n\texport interface HTTPValidationError {\n\t\tdetail?: Api.ValidationError[];\n\t}\n\n\texport enum IncludeEnum {\n\t\tDocuments = 'documents',\n\t\tEmbeddings = 'embeddings',\n\t\tMetadatas = 'metadatas',\n\t\tDistances = 'distances',\n\t\tUris = 'uris',\n\t\tData = 'data'\n\t}\n\n\texport interface ListCollections200Response {\n\t}\n\n\texport interface ListCollectionsV1200Response {\n\t}\n\n\texport interface PreFlightChecks200Response {\n\t}\n\n\texport interface PreFlightChecks200Response2 {\n\t}\n\n\texport interface QueryEmbedding {\n\t\twhere?: Api.QueryEmbedding.Where | null;\n\t\t'where_document'?: Api.QueryEmbedding.WhereDocument | null;\n\t\t'query_embeddings': Api.QueryEmbedding.QueryEmbedding2[];\n\t\t/**\n\t\t * @type {number}\n\t\t * @memberof QueryEmbedding\n\t\t */\n\t\t'n_results'?: number;\n\t\tinclude?: Api.IncludeEnum[];\n\t}\n\n\t/**\n\t * @export\n\t * @namespace QueryEmbedding\n\t */\n\texport namespace QueryEmbedding {\n\t\texport interface Where {\n\t\t}\n\n\t\texport interface WhereDocument {\n\t\t}\n\n\t\texport interface QueryEmbedding2 {\n\t\t}\n\n\t}\n\n\texport interface Update200Response {\n\t}\n\n\texport interface UpdateCollection {\n\t\t'new_name'?: string | null;\n\t\t'new_metadata'?: Api.UpdateCollection.NewMetadata | null;\n\t}\n\n\t/**\n\t * @export\n\t * @namespace UpdateCollection\n\t */\n\texport namespace UpdateCollection {\n\t\texport interface NewMetadata {\n\t\t}\n\n\t}\n\n\texport interface UpdateCollection200Response {\n\t}\n\n\texport interface UpdateCollectionV1200Response {\n\t}\n\n\texport interface UpdateEmbedding {\n\t\tembeddings?: (Api.UpdateEmbedding.Embedding[]) | null;\n\t\tmetadatas?: ((Api.UpdateEmbedding.Metadatum | null)[]) | null;\n\t\tdocuments?: ((string | null)[]) | null;\n\t\turis?: ((string | null)[]) | null;\n\t\tids: string[];\n\t}\n\n\t/**\n\t * @export\n\t * @namespace UpdateEmbedding\n\t */\n\texport namespace UpdateEmbedding {\n\t\texport interface Embedding {\n\t\t}\n\n\t\texport interface Metadatum {\n\t\t}\n\n\t}\n\n\texport interface UpdateV1200Response {\n\t}\n\n\texport interface Upsert200Response {\n\t}\n\n\texport interface UpsertV1200Response {\n\t}\n\n\texport interface ValidationError {\n\t\tloc: (string | number)[];\n\t\tmsg: string;\n\t\t'type': string;\n\t}\n\n}\n","/* eslint-disable */\n// tslint:disable\n/**\n * FastAPI\n *\n *\n * OpenAPI spec version: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */\n\nexport interface ConfigurationParameters {\n\tapiKey?: string | ((name: string) => string | null);\n\tusername?: string;\n\tpassword?: string;\n\tauthorization?: string | ((name: string, scopes?: string[]) => string | null);\n\tbasePath?: string;\n}\n\nexport class Configuration {\n\t/**\n\t * parameter for apiKey security\n\t * @param name security name\n\t * @memberof Configuration\n\t */\n\tapiKey?: string | ((name: string) => string | null);\n\t/**\n\t * parameter for basic security\n\t *\n\t * @type {string}\n\t * @memberof Configuration\n\t */\n\tusername?: string;\n\t/**\n\t * parameter for basic security\n\t *\n\t * @type {string}\n\t * @memberof Configuration\n\t */\n\tpassword?: string;\n\t/**\n\t * parameter for oauth2, openIdConnect or http security\n\t * @param name security name\n\t * @param scopes oauth2 scopes\n\t * @memberof Configuration\n\t */\n\tauthorization?: string | ((name: string, scopes?: string[]) => string | null);\n\t/**\n\t * override base path\n\t *\n\t * @type {string}\n\t * @memberof Configuration\n\t */\n\tbasePath?: string;\n\n\tconstructor(param: ConfigurationParameters = {}) {\n\t\tthis.apiKey = param.apiKey;\n\t\tthis.username = param.username;\n\t\tthis.password = param.password;\n\t\tthis.authorization = param.authorization;\n\t\tthis.basePath = param.basePath;\n\t}\n}\n","/**\n * This is a generic Chroma error.\n */\nexport class ChromaError extends Error {\n  constructor(name: string, message: string, public readonly cause?: unknown) {\n    super(message);\n    this.name = name;\n  }\n}\n\n/**\n * Indicates that there was a problem with the connection to the Chroma server (e.g. the server is down or the client is not connected to the internet)\n */\nexport class ChromaConnectionError extends Error {\n  name = \"ChromaConnectionError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\n/** Indicates that the server encountered an error while handling the request. */\nexport class ChromaServerError extends Error {\n  name = \"ChromaServerError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\n/** Indicate that there was an issue with the request that the client made. */\nexport class ChromaClientError extends Error {\n  name = \"ChromaClientError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\n/** The request lacked valid authentication. */\nexport class ChromaUnauthorizedError extends Error {\n  name = \"ChromaAuthError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\n/** The user does not have permission to access the requested resource. */\nexport class ChromaForbiddenError extends Error {\n  name = \"ChromaForbiddenError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\nexport class ChromaNotFoundError extends Error {\n  name = \"ChromaNotFoundError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\nexport class ChromaValueError extends Error {\n  name = \"ChromaValueError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\nexport class InvalidCollectionError extends Error {\n  name = \"InvalidCollectionError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\nexport class InvalidArgumentError extends Error {\n  name = \"InvalidArgumentError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\nexport class ChromaUniqueError extends Error {\n  name = \"ChromaUniqueError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\nexport function createErrorByType(type: string, message: string) {\n  switch (type) {\n    case \"InvalidCollection\":\n      return new InvalidCollectionError(message);\n    case \"InvalidArgumentError\":\n      return new InvalidArgumentError(message);\n    default:\n      return undefined;\n  }\n}\n","import { ChromaClient } from \"./ChromaClient\";\nimport { IEmbeddingFunction } from \"./embeddings/IEmbeddingFunction\";\nimport {\n  CollectionMetadata,\n  AddRecordsParams,\n  UpsertRecordsParams,\n  BaseGetParams,\n  GetResponse,\n  UpdateRecordsParams,\n  QueryRecordsParams,\n  MultiQueryResponse,\n  PeekParams,\n  MultiGetResponse,\n  DeleteParams,\n  Embeddings,\n  CollectionParams,\n} from \"./types\";\nimport { prepareRecordRequest, toArray, toArrayOfArrays } from \"./utils\";\nimport { Api as GeneratedApi } from \"./generated\";\n\nexport class Collection {\n  public name: string;\n  public id: string;\n  public metadata: CollectionMetadata | undefined;\n  /**\n   * @ignore\n   */\n  private client: ChromaClient;\n  /**\n   * @ignore\n   */\n  public embeddingFunction: IEmbeddingFunction;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    name: string,\n    id: string,\n    client: ChromaClient,\n    embeddingFunction: IEmbeddingFunction,\n    metadata?: CollectionMetadata,\n  ) {\n    this.name = name;\n    this.id = id;\n    this.metadata = metadata;\n    this.client = client;\n    this.embeddingFunction = embeddingFunction;\n  }\n\n  /**\n   * Add items to the collection\n   * @param {Object} params - The parameters for the query.\n   * @param {ID | IDs} [params.ids] - IDs of the items to add.\n   * @param {Embedding | Embeddings} [params.embeddings] - Optional embeddings of the items to add.\n   * @param {Metadata | Metadatas} [params.metadatas] - Optional metadata of the items to add.\n   * @param {Document | Documents} [params.documents] - Optional documents of the items to add.\n   * @returns {Promise<AddResponse>} - The response from the API. True if successful.\n   *\n   * @example\n   * ```typescript\n   * const response = await collection.add({\n   *   ids: [\"id1\", \"id2\"],\n   *   embeddings: [[1, 2, 3], [4, 5, 6]],\n   *   metadatas: [{ \"key\": \"value\" }, { \"key\": \"value\" }],\n   *   documents: [\"document1\", \"document2\"]\n   * });\n   * ```\n   */\n  async add(params: AddRecordsParams): Promise<void> {\n    await this.client.init();\n\n    await this.client.api.add(\n      this.client.tenant,\n      this.client.database,\n      this.id,\n      // TODO: For some reason the auto generated code requires metadata to be defined here.\n      (await prepareRecordRequest(\n        params,\n        this.embeddingFunction,\n      )) as GeneratedApi.AddEmbedding,\n      this.client.api.options,\n    );\n  }\n\n  /**\n   * Upsert items to the collection\n   * @param {Object} params - The parameters for the query.\n   * @param {ID | IDs} [params.ids] - IDs of the items to add.\n   * @param {Embedding | Embeddings} [params.embeddings] - Optional embeddings of the items to add.\n   * @param {Metadata | Metadatas} [params.metadatas] - Optional metadata of the items to add.\n   * @param {Document | Documents} [params.documents] - Optional documents of the items to add.\n   * @returns {Promise<void>}\n   *\n   * @example\n   * ```typescript\n   * const response = await collection.upsert({\n   *   ids: [\"id1\", \"id2\"],\n   *   embeddings: [[1, 2, 3], [4, 5, 6]],\n   *   metadatas: [{ \"key\": \"value\" }, { \"key\": \"value\" }],\n   *   documents: [\"document1\", \"document2\"],\n   * });\n   * ```\n   */\n  async upsert(params: UpsertRecordsParams): Promise<void> {\n    await this.client.init();\n\n    await this.client.api.upsert(\n      this.client.tenant,\n      this.client.database,\n      this.id,\n      // TODO: For some reason the auto generated code requires metadata to be defined here.\n      (await prepareRecordRequest(\n        params,\n        this.embeddingFunction,\n      )) as GeneratedApi.AddEmbedding,\n      this.client.api.options,\n    );\n  }\n\n  /**\n   * Count the number of items in the collection\n   * @returns {Promise<number>} - The number of items in the collection.\n   *\n   * @example\n   * ```typescript\n   * const count = await collection.count();\n   * ```\n   */\n  async count(): Promise<number> {\n    await this.client.init();\n    return (await this.client.api.count(\n      this.client.tenant,\n      this.client.database,\n      this.id,\n      this.client.api.options,\n    )) as number;\n  }\n\n  /**\n   * Get items from the collection\n   * @param {Object} params - The parameters for the query.\n   * @param {ID | IDs} [params.ids] - Optional IDs of the items to get.\n   * @param {Where} [params.where] - Optional where clause to filter items by.\n   * @param {PositiveInteger} [params.limit] - Optional limit on the number of items to get.\n   * @param {PositiveInteger} [params.offset] - Optional offset on the items to get.\n   * @param {IncludeEnum[]} [params.include] - Optional list of items to include in the response.\n   * @param {WhereDocument} [params.whereDocument] - Optional where clause to filter items by.\n   * @returns {Promise<GetResponse>} - The response from the server.\n   *\n   * @example\n   * ```typescript\n   * const response = await collection.get({\n   *   ids: [\"id1\", \"id2\"],\n   *   where: { \"key\": \"value\" },\n   *   limit: 10,\n   *   offset: 0,\n   *   include: [\"embeddings\", \"metadatas\", \"documents\"],\n   *   whereDocument: { $contains: \"value\" },\n   * });\n   * ```\n   */\n  async get({\n    ids,\n    where,\n    limit,\n    offset,\n    include,\n    whereDocument,\n  }: BaseGetParams = {}): Promise<GetResponse> {\n    await this.client.init();\n\n    const idsArray = ids ? toArray(ids) : undefined;\n\n    const resp = (await this.client.api.aGet(\n      this.id,\n      this.client.tenant,\n      this.client.database,\n      {\n        ids: idsArray,\n        where,\n        limit,\n        offset,\n        include,\n        where_document: whereDocument,\n      },\n      this.client.api.options,\n    )) as MultiGetResponse;\n\n    return resp;\n  }\n\n  /**\n   * Update items in the collection\n   * @param {Object} params - The parameters for the query.\n   * @param {ID | IDs} [params.ids] - IDs of the items to add.\n   * @param {Embedding | Embeddings} [params.embeddings] - Optional embeddings of the items to add.\n   * @param {Metadata | Metadatas} [params.metadatas] - Optional metadata of the items to add.\n   * @param {Document | Documents} [params.documents] - Optional documents of the items to add.\n   * @returns {Promise<void>}\n   *\n   * @example\n   * ```typescript\n   * const response = await collection.update({\n   *   ids: [\"id1\", \"id2\"],\n   *   embeddings: [[1, 2, 3], [4, 5, 6]],\n   *   metadatas: [{ \"key\": \"value\" }, { \"key\": \"value\" }],\n   *   documents: [\"document1\", \"document2\"],\n   * });\n   * ```\n   */\n  async update(params: UpdateRecordsParams): Promise<void> {\n    await this.client.init();\n\n    await this.client.api.update(\n      this.client.tenant,\n      this.client.database,\n      this.id,\n      await prepareRecordRequest(params, this.embeddingFunction, true),\n      this.client.api.options,\n    );\n  }\n\n  /**\n   * Performs a query on the collection using the specified parameters.\n   *\n   * @param {Object} params - The parameters for the query.\n   * @param {Embedding | Embeddings} [params.queryEmbeddings] - Optional query embeddings to use for the search.\n   * @param {PositiveInteger} [params.nResults] - Optional number of results to return (default is 10).\n   * @param {Where} [params.where] - Optional query condition to filter results based on metadata values.\n   * @param {string | string[]} [params.queryTexts] - Optional query text(s) to search for in the collection.\n   * @param {WhereDocument} [params.whereDocument] - Optional query condition to filter results based on document content.\n   * @param {IncludeEnum[]} [params.include] - Optional array of fields to include in the result, such as \"metadata\" and \"document\".\n   *\n   * @returns {Promise<QueryResponse>} A promise that resolves to the query results.\n   * @throws {Error} If there is an issue executing the query.\n   * @example\n   * // Query the collection using embeddings\n   * const results = await collection.query({\n   *   queryEmbeddings: [[0.1, 0.2, ...], ...],\n   *   nResults: 10,\n   *   where: {\"name\": {\"$eq\": \"John Doe\"}},\n   *   include: [\"metadata\", \"document\"]\n   * });\n   * @example\n   * ```js\n   * // Query the collection using query text\n   * const results = await collection.query({\n   *   queryTexts: \"some text\",\n   *   nResults: 10,\n   *   where: {\"name\": {\"$eq\": \"John Doe\"}},\n   *   include: [\"metadata\", \"document\"]\n   * });\n   * ```\n   *\n   */\n  async query({\n    nResults = 10,\n    where,\n    whereDocument,\n    include,\n    queryTexts,\n    queryEmbeddings,\n  }: QueryRecordsParams): Promise<MultiQueryResponse> {\n    if ((queryTexts && queryEmbeddings) || (!queryTexts && !queryEmbeddings)) {\n      throw new Error(\n        \"You must supply exactly one of queryTexts or queryEmbeddings.\",\n      );\n    }\n\n    await this.client.init();\n\n    const arrayQueryEmbeddings: Embeddings =\n      queryTexts !== undefined\n        ? await this.embeddingFunction.generate(toArray(queryTexts))\n        : toArrayOfArrays<number>(queryEmbeddings);\n\n    return (await this.client.api.getNearestNeighbors(\n      this.client.tenant,\n      this.client.database,\n      this.id,\n      {\n        query_embeddings: arrayQueryEmbeddings,\n        where,\n        n_results: nResults,\n        where_document: whereDocument,\n        include,\n      },\n      this.client.api.options,\n    )) as MultiQueryResponse;\n  }\n\n  /**\n   * Modify the collection name or metadata\n   * @param {Object} params - The parameters for the query.\n   * @param {string} [params.name] - Optional new name for the collection.\n   * @param {CollectionMetadata} [params.metadata] - Optional new metadata for the collection.\n   * @returns {Promise<void>} - The response from the API.\n   *\n   * @example\n   * ```typescript\n   * const response = await client.updateCollection({\n   *   name: \"new name\",\n   *   metadata: { \"key\": \"value\" },\n   * });\n   * ```\n   */\n  async modify({\n    name,\n    metadata,\n  }: {\n    name?: string;\n    metadata?: CollectionMetadata;\n  }): Promise<CollectionParams> {\n    await this.client.init();\n    return this.client.api\n      .updateCollection(\n        this.client.tenant,\n        this.client.database,\n        this.id,\n        {\n          new_name: name,\n          new_metadata: metadata,\n        },\n        this.client.api.options,\n      )\n      .then(() => {\n        if (name !== undefined) {\n          this.name = name;\n        }\n        if (metadata !== undefined) {\n          this.metadata = metadata;\n        }\n        return {\n          name: this.name,\n          metadata: this.metadata,\n        } as CollectionParams;\n      });\n  }\n\n  /**\n   * Peek inside the collection\n   * @param {Object} params - The parameters for the query.\n   * @param {PositiveInteger} [params.limit] - Optional number of results to return (default is 10).\n   * @returns {Promise<GetResponse>} A promise that resolves to the query results.\n   * @throws {Error} If there is an issue executing the query.\n   *\n   * @example\n   * ```typescript\n   * const results = await collection.peek({\n   *   limit: 10\n   * });\n   * ```\n   */\n  async peek({ limit = 10 }: PeekParams = {}): Promise<MultiGetResponse> {\n    await this.client.init();\n    return (await this.client.api.aGet(\n      this.id,\n      this.client.tenant,\n      this.client.database,\n      {\n        limit,\n      },\n      this.client.api.options,\n    )) as MultiGetResponse;\n  }\n\n  /**\n   * Deletes items from the collection.\n   * @param {Object} params - The parameters for deleting items from the collection.\n   * @param {ID | IDs} [params.ids] - Optional ID or array of IDs of items to delete.\n   * @param {Where} [params.where] - Optional query condition to filter items to delete based on metadata values.\n   * @param {WhereDocument} [params.whereDocument] - Optional query condition to filter items to delete based on document content.\n   * @returns {Promise<string[]>} A promise that resolves to the IDs of the deleted items.\n   * @throws {Error} If there is an issue deleting items from the collection.\n   *\n   * @example\n   * ```typescript\n   * const results = await collection.delete({\n   *   ids: \"some_id\",\n   *   where: {\"name\": {\"$eq\": \"John Doe\"}},\n   *   whereDocument: {\"$contains\":\"search_string\"}\n   * });\n   * ```\n   */\n  async delete({\n    ids,\n    where,\n    whereDocument,\n  }: DeleteParams = {}): Promise<void> {\n    await this.client.init();\n    let idsArray = undefined;\n    if (ids !== undefined) idsArray = toArray(ids);\n    await this.client.api.aDelete(\n      this.id,\n      this.client.tenant,\n      this.client.database,\n      { ids: idsArray, where: where, where_document: whereDocument },\n      this.client.api.options,\n    );\n  }\n}\n","import { AdminClient } from \"./AdminClient\";\nimport { ChromaClient } from \"./ChromaClient\";\nimport { ChromaConnectionError } from \"./Errors\";\nimport { IEmbeddingFunction } from \"./embeddings/IEmbeddingFunction\";\nimport {\n  AddRecordsParams,\n  BaseRecordOperationParams,\n  CollectionParams,\n  Metadata,\n  MultiRecordOperationParams,\n  UpdateRecordsParams,\n} from \"./types\";\nimport { Collection } from \"./Collection\";\n\n// a function to convert a non-Array object to an Array\nexport function toArray<T>(obj: T | T[]): Array<T> {\n  if (Array.isArray(obj)) {\n    return obj;\n  } else {\n    return [obj] as T[];\n  }\n}\n\n// a function to convert an array to array of arrays\nexport function toArrayOfArrays<T>(\n  obj: Array<Array<T>> | Array<T>,\n): Array<Array<T>> {\n  if (Array.isArray(obj[0])) {\n    return obj as Array<Array<T>>;\n  } else {\n    return [obj] as Array<Array<T>>;\n  }\n}\n\n/**\n * Dynamically imports a specified module, providing a workaround for browser environments.\n * This function is necessary because we dynamically import optional dependencies\n * which can cause issues with bundlers that detect the import and throw an error\n * on build time when the dependency is not installed.\n * Using this workaround, the dynamic import is only evaluated on runtime\n * where we work with try-catch when importing optional dependencies.\n *\n * @param {string} moduleName - Specifies the module to import.\n * @returns {Promise<any>} Returns a Promise that resolves to the imported module.\n */\nexport async function importOptionalModule(moduleName: string) {\n  return Function(`return import(\"${moduleName}\")`)();\n}\n\nexport async function validateTenantDatabase(\n  adminClient: AdminClient,\n  tenant: string,\n  database: string,\n): Promise<void> {\n  try {\n    await adminClient.getTenant({ name: tenant });\n  } catch (error) {\n    if (error instanceof ChromaConnectionError) {\n      throw error;\n    }\n    throw new Error(\n      `Could not connect to tenant ${tenant}. Are you sure it exists? Underlying error:\n${error}`,\n    );\n  }\n\n  try {\n    await adminClient.getDatabase({ name: database, tenantName: tenant });\n  } catch (error) {\n    if (error instanceof ChromaConnectionError) {\n      throw error;\n    }\n    throw new Error(\n      `Could not connect to database ${database} for tenant ${tenant}. Are you sure it exists? Underlying error:\n${error}`,\n    );\n  }\n}\n\nexport function isBrowser() {\n  return (\n    typeof window !== \"undefined\" && typeof window.document !== \"undefined\"\n  );\n}\n\nfunction arrayifyParams(\n  params: BaseRecordOperationParams,\n): MultiRecordOperationParams {\n  return {\n    ids: toArray(params.ids),\n    embeddings: params.embeddings\n      ? toArrayOfArrays(params.embeddings)\n      : undefined,\n    metadatas: params.metadatas\n      ? toArray<Metadata>(params.metadatas)\n      : undefined,\n    documents: params.documents ? toArray(params.documents) : undefined,\n  };\n}\n\nexport async function prepareRecordRequest(\n  reqParams: AddRecordsParams | UpdateRecordsParams,\n  embeddingFunction: IEmbeddingFunction,\n  update?: true,\n): Promise<MultiRecordOperationParams> {\n  const { ids, embeddings, metadatas, documents } = arrayifyParams(reqParams);\n\n  if (!embeddings && !documents && !update) {\n    throw new Error(\"embeddings and documents cannot both be undefined\");\n  }\n\n  const embeddingsArray = embeddings\n    ? embeddings\n    : documents\n    ? await embeddingFunction.generate(documents)\n    : undefined;\n\n  if (!embeddingsArray && !update) {\n    throw new Error(\"Failed to generate embeddings for your request.\");\n  }\n\n  for (let i = 0; i < ids.length; i += 1) {\n    if (typeof ids[i] !== \"string\") {\n      throw new Error(\n        `Expected ids to be strings, found ${typeof ids[i]} at index ${i}`,\n      );\n    }\n  }\n\n  if (\n    (embeddingsArray !== undefined && ids.length !== embeddingsArray.length) ||\n    (metadatas !== undefined && ids.length !== metadatas.length) ||\n    (documents !== undefined && ids.length !== documents.length)\n  ) {\n    throw new Error(\n      \"ids, embeddings, metadatas, and documents must all be the same length\",\n    );\n  }\n\n  const uniqueIds = new Set(ids);\n  if (uniqueIds.size !== ids.length) {\n    const duplicateIds = ids.filter(\n      (item, index) => ids.indexOf(item) !== index,\n    );\n    throw new Error(\n      `ID's must be unique, found duplicates for: ${duplicateIds}`,\n    );\n  }\n\n  return {\n    ids,\n    metadatas,\n    documents,\n    embeddings: embeddingsArray,\n  };\n}\n\nexport function wrapCollection(\n  api: ChromaClient,\n  collection: CollectionParams,\n): Collection {\n  return new Collection(\n    collection.name,\n    collection.id,\n    api,\n    collection.embeddingFunction,\n    collection.metadata,\n  );\n}\n","export type AuthHeaders = { [header: string]: string };\ntype TokenHeaderType = \"AUTHORIZATION\" | \"X_CHROMA_TOKEN\";\n\nexport type AuthOptions = {\n  provider: ClientAuthProvider | string | undefined;\n  credentials?: any | undefined;\n\n  // Only relevant for token auth\n  tokenHeaderType?: TokenHeaderType | undefined;\n};\n\nexport const tokenHeaderTypeToHeaderKey = (\n  headerType: TokenHeaderType,\n): string => {\n  if (headerType === \"AUTHORIZATION\") {\n    return \"Authorization\";\n  } else {\n    return \"X-Chroma-Token\";\n  }\n};\n\nconst base64Encode = (str: string): string => {\n  return Buffer.from(str).toString(\"base64\");\n};\n\nexport interface ClientAuthProvider {\n  /**\n   * Abstract method for authenticating a client.\n   */\n  authenticate(): AuthHeaders;\n}\n\nexport class BasicAuthClientProvider implements ClientAuthProvider {\n  private readonly credentials: AuthHeaders;\n\n  /**\n   * Creates a new BasicAuthClientProvider.\n   * @param textCredentials - The credentials for the authentication provider. Must be of the form \"username:password\". If not supplied, the environment variable CHROMA_CLIENT_AUTH_CREDENTIALS will be used.\n   * @throws {Error} If neither credentials provider or text credentials are supplied.\n   */\n  constructor(textCredentials: string | undefined) {\n    const creds = textCredentials ?? process.env.CHROMA_CLIENT_AUTH_CREDENTIALS;\n    if (creds === undefined) {\n      throw new Error(\n        \"Credentials must be supplied via environment variable (CHROMA_CLIENT_AUTH_CREDENTIALS) or passed in as configuration.\",\n      );\n    }\n    this.credentials = {\n      Authorization: \"Basic \" + base64Encode(creds),\n    };\n  }\n\n  authenticate(): AuthHeaders {\n    return this.credentials;\n  }\n}\n\nexport class TokenAuthClientProvider implements ClientAuthProvider {\n  private readonly credentials: AuthHeaders;\n\n  constructor(\n    textCredentials: any,\n    headerType: TokenHeaderType = \"AUTHORIZATION\",\n  ) {\n    const creds = textCredentials ?? process.env.CHROMA_CLIENT_AUTH_CREDENTIALS;\n    if (creds === undefined) {\n      throw new Error(\n        \"Credentials must be supplied via environment variable (CHROMA_CLIENT_AUTH_CREDENTIALS) or passed in as configuration.\",\n      );\n    }\n\n    const headerKey: string = tokenHeaderTypeToHeaderKey(headerType);\n    const headerVal =\n      headerType === \"AUTHORIZATION\" ? `Bearer ${creds}` : creds;\n    this.credentials = {};\n    this.credentials[headerKey] = headerVal;\n  }\n\n  authenticate(): AuthHeaders {\n    return this.credentials;\n  }\n}\n\nexport const authOptionsToAuthProvider = (\n  auth: AuthOptions,\n): ClientAuthProvider => {\n  if (auth.provider === undefined) {\n    throw new Error(\"Auth provider not specified\");\n  }\n  if (auth.credentials === undefined) {\n    throw new Error(\"Auth credentials not specified\");\n  }\n  switch (auth.provider) {\n    case \"basic\":\n      return new BasicAuthClientProvider(auth.credentials);\n    case \"token\":\n      return new TokenAuthClientProvider(\n        auth.credentials,\n        auth.tokenHeaderType,\n      );\n      break;\n    default:\n      throw new Error(\"Invalid auth provider\");\n  }\n};\n","import {\n  ChromaUnauthorizedError,\n  ChromaClientError,\n  ChromaConnectionError,\n  ChromaForbiddenError,\n  ChromaNotFoundError,\n  ChromaServerError,\n  ChromaValueError,\n  ChromaError,\n  createErrorByType,\n  ChromaUniqueError,\n} from \"./Errors\";\nimport { FetchAPI } from \"./generated\";\n\nfunction isOfflineError(error: any): boolean {\n  return Boolean(\n    (error?.name === \"TypeError\" || error?.name === \"FetchError\") &&\n      (error.message?.includes(\"fetch failed\") ||\n        error.message?.includes(\"Failed to fetch\") ||\n        error.message?.includes(\"ENOTFOUND\")),\n  );\n}\n\nfunction parseServerError(error: string | undefined): Error {\n  const regex = /(\\w+)\\('(.+)'\\)/;\n  const match = error?.match(regex);\n  if (match) {\n    const [, name, message] = match;\n    switch (name) {\n      case \"ValueError\":\n        return new ChromaValueError(message);\n      default:\n        return new ChromaError(name, message);\n    }\n  }\n  return new ChromaServerError(\n    \"The server encountered an error while handling the request.\",\n  );\n}\n\n/** This utility allows a single entrypoint for custom error handling logic\n *  that works across all ChromaClient methods.\n *\n *  It is intended to be passed to the ApiApi constructor.\n */\nexport const chromaFetch: FetchAPI = async (\n  input: RequestInfo | URL,\n  init?: RequestInit,\n): Promise<Response> => {\n  try {\n    const resp = await fetch(input, init);\n\n    const clonedResp = resp.clone();\n    const respBody = await clonedResp.json();\n    if (!clonedResp.ok) {\n      const error = createErrorByType(respBody?.error, respBody?.message);\n      if (error) {\n        throw error;\n      }\n      switch (resp.status) {\n        case 400:\n          throw new ChromaClientError(\n            `Bad request to ${input} with status: ${resp.statusText}`,\n          );\n        case 401:\n          throw new ChromaUnauthorizedError(`Unauthorized`);\n        case 403:\n          throw new ChromaForbiddenError(\n            `You do not have permission to access the requested resource.`,\n          );\n        case 404:\n          throw new ChromaNotFoundError(\n            `The requested resource could not be found: ${input}`,\n          );\n        case 409:\n          throw new ChromaUniqueError(\"The resource already exists\");\n        case 500:\n          throw parseServerError(respBody?.error);\n        case 502:\n        case 503:\n        case 504:\n          throw new ChromaConnectionError(\n            `Unable to connect to the chromadb server. Please try again later.`,\n          );\n      }\n      throw new Error(\n        `Failed to fetch ${input} with status ${resp.status}: ${resp.statusText}`,\n      );\n    }\n\n    if (respBody?.error) {\n      throw parseServerError(respBody.error);\n    }\n\n    return resp;\n  } catch (error) {\n    if (isOfflineError(error)) {\n      throw new ChromaConnectionError(\n        \"Failed to connect to chromadb. Make sure your server is running and try again. If you are running from a browser, make sure that your chromadb instance is configured to allow requests from the current origin using the CHROMA_SERVER_CORS_ALLOW_ORIGINS environment variable.\",\n        error,\n      );\n    }\n    throw error;\n  }\n};\n","import { Configuration, ApiApi as DefaultApi } from \"./generated\";\nimport { validateTenantDatabase } from \"./utils\";\nimport { ConfigOptions } from \"./types\";\nimport {\n  AuthOptions,\n  authOptionsToAuthProvider,\n  ClientAuthProvider,\n} from \"./auth\";\nimport { chromaFetch } from \"./ChromaFetch\";\n\nconst DEFAULT_TENANT = \"default_tenant\";\nconst DEFAULT_DATABASE = \"default_database\";\n\n// interface for tenant\ninterface Tenant {\n  name: string;\n}\n\n// interface for tenant\ninterface Database {\n  name: string;\n}\n\nexport class AdminClient {\n  /**\n   * @ignore\n   */\n  private api: DefaultApi & ConfigOptions;\n  private authProvider: ClientAuthProvider | undefined;\n  public tenant: string = DEFAULT_TENANT;\n  public database: string = DEFAULT_DATABASE;\n\n  /**\n   * Creates a new AdminClient instance.\n   * @param {Object} params - The parameters for creating a new client\n   * @param {string} [params.path] - The base path for the Chroma API.\n   * @returns {AdminClient} A new AdminClient instance.\n   *\n   * @example\n   * ```typescript\n   * const client = new AdminClient({\n   *   path: \"http://localhost:8000\"\n   * });\n   * ```\n   */\n  constructor({\n    path,\n    fetchOptions,\n    auth,\n    tenant = DEFAULT_TENANT,\n    database = DEFAULT_DATABASE,\n  }: {\n    path?: string;\n    fetchOptions?: RequestInit;\n    auth?: AuthOptions;\n    tenant?: string;\n    database?: string;\n  } = {}) {\n    if (path === undefined) path = \"http://localhost:8000\";\n    this.tenant = tenant;\n    this.database = database;\n    this.authProvider = undefined;\n\n    const apiConfig: Configuration = new Configuration({\n      basePath: path,\n    });\n\n    this.api = new DefaultApi(apiConfig, undefined, chromaFetch);\n    this.api.options = fetchOptions ?? {};\n\n    if (auth !== undefined) {\n      this.authProvider = authOptionsToAuthProvider(auth);\n      this.api.options.headers = {\n        ...this.api.options.headers,\n        ...this.authProvider.authenticate(),\n      };\n    }\n  }\n\n  /**\n   * Sets the tenant and database for the client.\n   *\n   * @param {Object} params - The parameters for setting tenant and database.\n   * @param {string} params.tenant - The name of the tenant.\n   * @param {string} params.database - The name of the database.\n   *\n   * @returns {Promise<void>} A promise that returns nothing\n   * @throws {Error} Any issues\n   *\n   * @example\n   * ```typescript\n   * await adminClient.setTenant({\n   *   tenant: \"my_tenant\",\n   *   database: \"my_database\",\n   * });\n   * ```\n   */\n  public async setTenant({\n    tenant = DEFAULT_TENANT,\n    database = DEFAULT_DATABASE,\n  }: {\n    tenant: string;\n    database?: string;\n  }): Promise<void> {\n    await validateTenantDatabase(this, tenant, database);\n    this.tenant = tenant;\n    this.database = database;\n  }\n\n  /**\n   * Sets the database for the client.\n   *\n   * @param {Object} params - The parameters for setting the database.\n   * @param {string} params.database - The name of the database.\n   *\n   * @returns {Promise<void>} A promise that returns nothing\n   * @throws {Error} Any issues\n   *\n   * @example\n   * ```typescript\n   * await adminClient.setDatabase({\n   *   database: \"my_database\",\n   * });\n   * ```\n   */\n  public async setDatabase({\n    database = DEFAULT_DATABASE,\n  }: {\n    database?: string;\n  }): Promise<void> {\n    await validateTenantDatabase(this, this.tenant, database);\n    this.database = database;\n  }\n\n  /**\n   * Creates a new tenant with the specified properties.\n   *\n   * @param {Object} params - The parameters for creating a new tenant.\n   * @param {string} params.name - The name of the tenant.\n   *\n   * @returns {Promise<Tenant>} A promise that resolves to the created tenant.\n   * @throws {Error} If there is an issue creating the tenant.\n   *\n   * @example\n   * ```typescript\n   * await adminClient.createTenant({\n   *   name: \"my_tenant\",\n   * });\n   * ```\n   */\n  public async createTenant({ name }: { name: string }): Promise<Tenant> {\n    await this.api.createTenant({ name }, this.api.options);\n\n    return { name };\n  }\n\n  /**\n   * Gets a tenant with the specified properties.\n   *\n   * @param {Object} params - The parameters for getting a tenant.\n   * @param {string} params.name - The name of the tenant.\n   *\n   * @returns {Promise<Tenant>} A promise that resolves to the tenant.\n   * @throws {Error} If there is an issue getting the tenant.\n   *\n   * @example\n   * ```typescript\n   * await adminClient.getTenant({\n   *   name: \"my_tenant\",\n   * });\n   * ```\n   */\n  public async getTenant({ name }: { name: string }): Promise<Tenant> {\n    const getTenant = (await this.api.getTenant(\n      name,\n      this.api.options,\n    )) as Tenant;\n\n    return { name: getTenant.name };\n  }\n\n  /**\n   * Creates a new database with the specified properties.\n   *\n   * @param {Object} params - The parameters for creating a new database.\n   * @param {string} params.name - The name of the database.\n   * @param {string} params.tenantName - The name of the tenant.\n   *\n   * @returns {Promise<Database>} A promise that resolves to the created database.\n   * @throws {Error} If there is an issue creating the database.\n   *\n   * @example\n   * ```typescript\n   * await adminClient.createDatabase({\n   *   name: \"my_database\",\n   *   tenantName: \"my_tenant\",\n   * });\n   * ```\n   */\n  public async createDatabase({\n    name,\n    tenantName,\n  }: {\n    name: string;\n    tenantName: string;\n  }): Promise<Database> {\n    await this.api.createDatabase(tenantName, { name }, this.api.options);\n\n    return { name };\n  }\n\n  /**\n   * Gets a database with the specified properties.\n   *\n   * @param {Object} params - The parameters for getting a database.\n   * @param {string} params.name - The name of the database.\n   * @param {string} params.tenantName - The name of the tenant.\n   *\n   * @returns {Promise<Database>} A promise that resolves to the database.\n   * @throws {Error} If there is an issue getting the database.\n   *\n   * @example\n   * ```typescript\n   * await adminClient.getDatabase({\n   *   name: \"my_database\",\n   *   tenantName: \"my_tenant\",\n   * });\n   * ```\n   */\n  public async getDatabase({\n    name,\n    tenantName,\n  }: {\n    name: string;\n    tenantName: string;\n  }): Promise<Database> {\n    const getDatabase = (await this.api.getDatabase(\n      name,\n      tenantName,\n      this.api.options,\n    )) as Database;\n\n    return { name: getDatabase.name } as Database;\n  }\n}\n","import { isBrowser } from \"../utils\";\nimport { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\n// Dynamically import module\nlet TransformersApi: Promise<any>;\n\nexport class DefaultEmbeddingFunction implements IEmbeddingFunction {\n  private pipelinePromise?: Promise<any> | null;\n  private transformersApi: any;\n  private model: string;\n  private revision: string;\n  private quantized: boolean;\n  private progress_callback: Function | null;\n\n  /**\n   * DefaultEmbeddingFunction constructor.\n   * @param options The configuration options.\n   * @param options.model The model to use to calculate embeddings. Defaults to 'Xenova/all-MiniLM-L6-v2', which is an ONNX port of `sentence-transformers/all-MiniLM-L6-v2`.\n   * @param options.revision The specific model version to use (can be a branch, tag name, or commit id). Defaults to 'main'.\n   * @param options.quantized Whether to load the 8-bit quantized version of the model. Defaults to `false`.\n   * @param options.progress_callback If specified, this function will be called during model construction, to provide the user with progress updates.\n   */\n  constructor({\n    model = \"Xenova/all-MiniLM-L6-v2\",\n    revision = \"main\",\n    quantized = false,\n    progress_callback = null,\n  }: {\n    model?: string;\n    revision?: string;\n    quantized?: boolean;\n    progress_callback?: Function | null;\n  } = {}) {\n    this.model = model;\n    this.revision = revision;\n    this.quantized = quantized;\n    this.progress_callback = progress_callback;\n  }\n\n  public async generate(texts: string[]): Promise<number[][]> {\n    await this.loadClient();\n\n    // Store a promise that resolves to the pipeline\n    this.pipelinePromise = new Promise(async (resolve, reject) => {\n      try {\n        const pipeline = this.transformersApi;\n\n        const quantized = this.quantized;\n        const revision = this.revision;\n        const progress_callback = this.progress_callback;\n\n        resolve(\n          await pipeline(\"feature-extraction\", this.model, {\n            quantized,\n            revision,\n            progress_callback,\n          }),\n        );\n      } catch (e) {\n        reject(e);\n      }\n    });\n\n    let pipe = await this.pipelinePromise;\n    let output = await pipe(texts, { pooling: \"mean\", normalize: true });\n    return output.tolist();\n  }\n\n  private async loadClient() {\n    if (this.transformersApi) return;\n    try {\n      // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n      let { pipeline } = await DefaultEmbeddingFunction.import();\n      TransformersApi = pipeline;\n    } catch (_a) {\n      // @ts-ignore\n      if (_a.code === \"MODULE_NOT_FOUND\") {\n        throw new Error(\n          \"Please install the chromadb-default-embed package to use the DefaultEmbeddingFunction, `npm install chromadb-default-embed`\",\n        );\n      }\n      throw _a; // Re-throw other errors\n    }\n    this.transformersApi = TransformersApi;\n  }\n\n  /** @ignore */\n  static async import(): Promise<{\n    // @ts-expect-error\n    pipeline: typeof import(\"chromadb-default-embed\");\n  }> {\n    try {\n      let importResult;\n      if (isBrowser()) {\n        importResult = await import(\n          // todo: we can't import chromadb-default-embed here yet because the `build` script was not run before publishing our fork to NPM, so the entrypoint in our forked package points to a non-existent file.\n          // @ts-expect-error\n          \"https://unpkg.com/@xenova/transformers@2.13.2\"\n        );\n      } else {\n        // @ts-expect-error\n        importResult = await import(\"chromadb-default-embed\");\n      }\n      const { pipeline, env } = importResult;\n\n      // By default, transformers.js attempts to first load models from the site origin when running in a browser (and then falls back to loading from HuggingFace).\n      // SPA servers like Vite tend to break this because by default they serve the same document regardless of the path, so transformers.js sees a 200 response and treats the HTML response as model JSON.\n      // todo: expose this as a config parameter in the future?\n      env.allowLocalModels = false;\n\n      return { pipeline };\n    } catch (e) {\n      throw new Error(\n        \"Please install chromadb-default-embed as a dependency with, e.g. `npm install chromadb-default-embed`\",\n      );\n    }\n  }\n}\n","import { AdminClient } from \"./AdminClient\";\nimport { authOptionsToAuthProvider, ClientAuthProvider } from \"./auth\";\nimport { chromaFetch } from \"./ChromaFetch\";\nimport { Collection } from \"./Collection\";\nimport { DefaultEmbeddingFunction } from \"./embeddings/DefaultEmbeddingFunction\";\nimport { Configuration, ApiApi as DefaultApi } from \"./generated\";\nimport type {\n  ChromaClientParams,\n  CollectionParams,\n  ConfigOptions,\n  CreateCollectionParams,\n  DeleteCollectionParams,\n  GetCollectionParams,\n  GetOrCreateCollectionParams,\n  ListCollectionsParams,\n  UserIdentity,\n} from \"./types\";\nimport { validateTenantDatabase, wrapCollection } from \"./utils\";\n\nconst DEFAULT_TENANT = \"default_tenant\";\nconst DEFAULT_DATABASE = \"default_database\";\n\nexport class ChromaClient {\n  /**\n   * @ignore\n   */\n  public api: DefaultApi & ConfigOptions;\n  /**\n   * @ignore\n   */\n  public tenant: string;\n  /**\n   * @ignore\n   */\n  public database: string;\n  /**\n   * @ignore\n   */\n  private _adminClient: AdminClient;\n  /**\n   * @ignore\n   */\n  private authProvider: ClientAuthProvider | undefined;\n  /**\n   * @ignore\n   */\n  private _initPromise: Promise<void> | undefined;\n\n  /**\n   * Creates a new ChromaClient instance.\n   * @param {Object} params - The parameters for creating a new client\n   * @param {string} [params.path] - The base path for the Chroma API.\n   * @returns {ChromaClient} A new ChromaClient instance.\n   *\n   * @example\n   * ```typescript\n   * const client = new ChromaClient({\n   *   path: \"http://localhost:8000\"\n   * });\n   * ```\n   */\n  constructor({\n    path = \"http://localhost:8000\",\n    fetchOptions,\n    auth,\n    tenant = DEFAULT_TENANT,\n    database = DEFAULT_DATABASE,\n  }: ChromaClientParams = {}) {\n    this.tenant = tenant;\n    this.database = database;\n    this.authProvider = undefined;\n\n    const apiConfig: Configuration = new Configuration({\n      basePath: path,\n    });\n\n    this.api = new DefaultApi(apiConfig, undefined, chromaFetch);\n    this.api.options = fetchOptions ?? {};\n\n    if (auth !== undefined) {\n      this.authProvider = authOptionsToAuthProvider(auth);\n      this.api.options.headers = {\n        ...this.api.options.headers,\n        ...this.authProvider.authenticate(),\n      };\n    }\n\n    this._adminClient = new AdminClient({\n      path,\n      fetchOptions,\n      auth,\n      tenant,\n      database,\n    });\n  }\n\n  /** @ignore */\n  async init(): Promise<void> {\n    if (!this._initPromise) {\n      if (this.authProvider !== undefined) {\n        await this.getUserIdentity();\n      }\n\n      this._initPromise = validateTenantDatabase(\n        this._adminClient,\n        this.tenant,\n        this.database,\n      );\n    }\n\n    return this._initPromise;\n  }\n\n  /**\n   * Tries to set the tenant and database for the client.\n   *\n   * @returns {Promise<void>} A promise that resolves when the tenant/database is resolved.\n   * @throws {Error} If there is an issue resolving the tenant and database.\n   *\n   */\n  async getUserIdentity(): Promise<void> {\n    const user_identity = (await this.api.getUserIdentity(\n      this.api.options,\n    )) as UserIdentity;\n    const user_tenant = user_identity.tenant;\n    const user_databases = user_identity.databases;\n\n    if (\n      user_tenant !== null &&\n      user_tenant !== undefined &&\n      user_tenant !== \"*\" &&\n      this.tenant == DEFAULT_TENANT\n    ) {\n      this.tenant = user_tenant;\n    }\n\n    if (\n      user_databases !== null &&\n      user_databases !== undefined &&\n      user_databases.length == 1 &&\n      user_databases[0] !== \"*\" &&\n      this.database == DEFAULT_DATABASE\n    ) {\n      this.database = user_databases[0];\n    }\n  }\n\n  /**\n   * Resets the state of the object by making an API call to the reset endpoint.\n   *\n   * @returns {Promise<boolean>} A promise that resolves when the reset operation is complete.\n   * @throws {ChromaConnectionError} If the client is unable to connect to the server.\n   * @throws {ChromaServerError} If the server experienced an error while the state.\n   *\n   * @example\n   * ```typescript\n   * await client.reset();\n   * ```\n   */\n  async reset(): Promise<boolean> {\n    await this.init();\n    return await this.api.postV2Reset(this.api.options);\n  }\n\n  /**\n   * Returns the version of the Chroma API.\n   * @returns {Promise<string>} A promise that resolves to the version of the Chroma API.\n   * @throws {ChromaConnectionError} If the client is unable to connect to the server.\n   *\n   * @example\n   * ```typescript\n   * const version = await client.version();\n   * ```\n   */\n  async version(): Promise<string> {\n    return await this.api.getV2Version(this.api.options);\n  }\n\n  /**\n   * Returns a heartbeat from the Chroma API.\n   * @returns {Promise<number>} A promise that resolves to the heartbeat from the Chroma API.\n   * @throws {ChromaConnectionError} If the client is unable to connect to the server.\n   *\n   * @example\n   * ```typescript\n   * const heartbeat = await client.heartbeat();\n   * ```\n   */\n  async heartbeat(): Promise<number> {\n    const response = await this.api.getV2Heartbeat(this.api.options);\n    return response[\"nanosecond heartbeat\"];\n  }\n\n  /**\n   * Creates a new collection with the specified properties.\n   *\n   * @param {Object} params - The parameters for creating a new collection.\n   * @param {string} params.name - The name of the collection.\n   * @param {CollectionMetadata} [params.metadata] - Optional metadata associated with the collection.\n   * @param {IEmbeddingFunction} [params.embeddingFunction] - Optional custom embedding function for the collection.\n   *\n   * @returns {Promise<Collection>} A promise that resolves to the created collection.\n   * @throws {ChromaConnectionError} If the client is unable to connect to the server.\n   * @throws {ChromaServerError} If there is an issue creating the collection.\n   *\n   * @example\n   * ```typescript\n   * const collection = await client.createCollection({\n   *   name: \"my_collection\",\n   *   metadata: {\n   *     \"description\": \"My first collection\"\n   *   }\n   * });\n   * ```\n   */\n  async createCollection({\n    name,\n    metadata,\n    embeddingFunction = new DefaultEmbeddingFunction(),\n  }: CreateCollectionParams): Promise<Collection> {\n    await this.init();\n    const newCollection = (await this.api.createCollection(\n      this.tenant,\n      this.database,\n      {\n        name,\n        // @ts-ignore: we need to generate the client libraries again\n        configuration: null, //TODO: Configuration type in JavaScript\n        metadata,\n      },\n      this.api.options,\n    )) as CollectionParams;\n\n    return wrapCollection(this, {\n      name: newCollection.name,\n      id: newCollection.id,\n      metadata: newCollection.metadata,\n      embeddingFunction,\n    });\n  }\n\n  /**\n   * Gets or creates a collection with the specified properties.\n   *\n   * @param {Object} params - The parameters for creating a new collection.\n   * @param {string} params.name - The name of the collection.\n   * @param {CollectionMetadata} [params.metadata] - Optional metadata associated with the collection.\n   * @param {IEmbeddingFunction} [params.embeddingFunction] - Optional custom embedding function for the collection.\n   *\n   * @returns {Promise<Collection>} A promise that resolves to the got or created collection.\n   * @throws {Error} If there is an issue getting or creating the collection.\n   *\n   * @example\n   * ```typescript\n   * const collection = await client.getOrCreateCollection({\n   *   name: \"my_collection\",\n   *   metadata: {\n   *     \"description\": \"My first collection\"\n   *   }\n   * });\n   * ```\n   */\n  async getOrCreateCollection({\n    name,\n    metadata,\n    embeddingFunction = new DefaultEmbeddingFunction(),\n  }: GetOrCreateCollectionParams): Promise<Collection> {\n    await this.init();\n    const newCollection = (await this.api.createCollection(\n      this.tenant,\n      this.database,\n      {\n        name,\n        // @ts-ignore: we need to generate the client libraries again\n        configuration: null, //TODO: Configuration type in JavaScript\n        metadata,\n        get_or_create: true,\n      },\n      this.api.options,\n    )) as CollectionParams;\n\n    return wrapCollection(this, {\n      name: newCollection.name,\n      id: newCollection.id,\n      metadata: newCollection.metadata,\n      embeddingFunction,\n    });\n  }\n\n  /**\n   * Lists all collections.\n   *\n   * @returns {Promise<CollectionType[]>} A promise that resolves to a list of collection names.\n   * @param {PositiveInteger} [params.limit] - Optional limit on the number of items to get.\n   * @param {PositiveInteger} [params.offset] - Optional offset on the items to get.\n   * @throws {Error} If there is an issue listing the collections.\n   *\n   * @example\n   * ```typescript\n   * const collections = await client.listCollections({\n   *     limit: 10,\n   *     offset: 0,\n   * });\n   * ```\n   */\n  async listCollections({ limit, offset }: ListCollectionsParams = {}): Promise<\n    CollectionParams[]\n  > {\n    await this.init();\n    return (await this.api.listCollections(\n      this.tenant,\n      this.database,\n      limit,\n      offset,\n      this.api.options,\n    )) as CollectionParams[];\n  }\n\n  /**\n   * Counts all collections.\n   *\n   * @returns {Promise<number>} A promise that resolves to the number of collections.\n   * @throws {Error} If there is an issue counting the collections.\n   *\n   * @example\n   * ```typescript\n   * const collections = await client.countCollections();\n   * ```\n   */\n  async countCollections(): Promise<number> {\n    await this.init();\n\n    return (await this.api.countCollections(\n      this.tenant,\n      this.database,\n      this.api.options,\n    )) as number;\n  }\n\n  /**\n   * Gets a collection with the specified name.\n   * @param {Object} params - The parameters for getting a collection.\n   * @param {string} params.name - The name of the collection.\n   * @param {IEmbeddingFunction} [params.embeddingFunction] - Optional custom embedding function for the collection.\n   * @returns {Promise<Collection>} A promise that resolves to the collection.\n   * @throws {Error} If there is an issue getting the collection.\n   *\n   * @example\n   * ```typescript\n   * const collection = await client.getCollection({\n   *   name: \"my_collection\"\n   * });\n   * ```\n   */\n  async getCollection({\n    name,\n    embeddingFunction,\n  }: GetCollectionParams): Promise<Collection> {\n    await this.init();\n\n    const response = (await this.api.getCollection(\n      this.tenant,\n      this.database,\n      name,\n      this.api.options,\n    )) as CollectionParams;\n\n    return wrapCollection(this, {\n      name: response.name,\n      id: response.id,\n      metadata: response.metadata,\n      embeddingFunction,\n    });\n  }\n\n  /**\n   * Deletes a collection with the specified name.\n   * @param {Object} params - The parameters for deleting a collection.\n   * @param {string} params.name - The name of the collection.\n   * @returns {Promise<void>} A promise that resolves when the collection is deleted.\n   * @throws {Error} If there is an issue deleting the collection.\n   *\n   * @example\n   * ```typescript\n   * await client.deleteCollection({\n   *  name: \"my_collection\"\n   * });\n   * ```\n   */\n  async deleteCollection({ name }: DeleteCollectionParams): Promise<void> {\n    await this.init();\n\n    await this.api.deleteCollection(\n      name,\n      this.tenant,\n      this.database,\n      this.api.options,\n    );\n  }\n}\n","// create a cloudclient class that takes in an api key and an optional database\n// this should wrap ChromaClient and specify the auth scheme correctly\n\nimport { ChromaClient } from \"./ChromaClient\";\nimport { AuthOptions } from \"./auth\";\n\ninterface CloudClientParams {\n  apiKey?: string;\n  database?: string;\n  tenant?: string;\n  cloudHost?: string;\n  cloudPort?: string;\n}\n\nclass CloudClient extends ChromaClient {\n  constructor({\n    apiKey,\n    database,\n    tenant,\n    cloudHost,\n    cloudPort,\n  }: CloudClientParams) {\n    // If no API key is provided, try to load it from the environment variable\n    if (!apiKey) {\n      apiKey = process.env.CHROMA_API_KEY;\n    }\n    if (!apiKey) {\n      throw new Error(\"No API key provided\");\n    }\n\n    cloudHost = cloudHost || \"https://api.trychroma.com\";\n    cloudPort = cloudPort || \"8000\";\n\n    const path = `${cloudHost}:${cloudPort}`;\n\n    const auth: AuthOptions = {\n      provider: \"token\",\n      credentials: apiKey,\n      tokenHeaderType: \"X_CHROMA_TOKEN\",\n    };\n\n    return new ChromaClient({\n      path: path,\n      auth: auth,\n      database,\n      tenant,\n    });\n\n    super();\n  }\n}\n\nexport { CloudClient };\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\nlet OpenAIApi: any;\nlet openAiVersion = null;\nlet openAiMajorVersion = null;\n\ninterface OpenAIAPI {\n  createEmbedding: (params: {\n    model: string;\n    input: string[];\n    user?: string;\n    dimensions?: number;\n  }) => Promise<number[][]>;\n}\n\nclass OpenAIAPIv3 implements OpenAIAPI {\n  private readonly configuration: any;\n  private openai: any;\n\n  constructor(configuration: { organization: string; apiKey: string }) {\n    this.configuration = new OpenAIApi.Configuration({\n      organization: configuration.organization,\n      apiKey: configuration.apiKey,\n    });\n    this.openai = new OpenAIApi.OpenAIApi(this.configuration);\n  }\n\n  public async createEmbedding(params: {\n    model: string;\n    input: string[];\n    user?: string;\n    dimensions?: number;\n  }): Promise<number[][]> {\n    const embeddings: number[][] = [];\n    const response = await this.openai\n      .createEmbedding({\n        model: params.model,\n        input: params.input,\n      })\n      .catch((error: any) => {\n        throw error;\n      });\n    // @ts-ignore\n    const data = response.data[\"data\"];\n    for (let i = 0; i < data.length; i += 1) {\n      embeddings.push(data[i][\"embedding\"]);\n    }\n    return embeddings;\n  }\n}\n\nclass OpenAIAPIv4 implements OpenAIAPI {\n  private readonly apiKey: any;\n  private openai: any;\n\n  constructor(apiKey: any) {\n    this.apiKey = apiKey;\n    this.openai = new OpenAIApi({\n      apiKey: this.apiKey,\n    });\n  }\n\n  public async createEmbedding(params: {\n    model: string;\n    input: string[];\n    user?: string;\n    dimensions?: number;\n  }): Promise<number[][]> {\n    const embeddings: number[][] = [];\n    const response = await this.openai.embeddings.create(params);\n    const data = response[\"data\"];\n    for (let i = 0; i < data.length; i += 1) {\n      embeddings.push(data[i][\"embedding\"]);\n    }\n    return embeddings;\n  }\n}\n\nexport class OpenAIEmbeddingFunction implements IEmbeddingFunction {\n  private api_key: string;\n  private org_id: string;\n  private model: string;\n  private openaiApi?: OpenAIAPI;\n  private dimensions?: number;\n\n  constructor({\n    openai_api_key,\n    openai_model,\n    openai_organization_id,\n    openai_embedding_dimensions,\n  }: {\n    openai_api_key: string;\n    openai_model?: string;\n    openai_organization_id?: string;\n    openai_embedding_dimensions?: number;\n  }) {\n    // we used to construct the client here, but we need to async import the types\n    // for the openai npm package, and the constructor can not be async\n    this.api_key = openai_api_key;\n    this.org_id = openai_organization_id || \"\";\n    this.model = openai_model || \"text-embedding-ada-002\";\n    this.dimensions = openai_embedding_dimensions;\n  }\n\n  private async loadClient() {\n    // cache the client\n    if (this.openaiApi) return;\n\n    try {\n      const { openai, version } = await OpenAIEmbeddingFunction.import();\n      OpenAIApi = openai;\n      let versionVar: string = version;\n      openAiVersion = versionVar.replace(/[^0-9.]/g, \"\");\n      openAiMajorVersion = parseInt(openAiVersion.split(\".\")[0]);\n    } catch (_a) {\n      // @ts-ignore\n      if (_a.code === \"MODULE_NOT_FOUND\") {\n        throw new Error(\n          \"Please install the openai package to use the OpenAIEmbeddingFunction, e.g. `npm install openai`\",\n        );\n      }\n      throw _a; // Re-throw other errors\n    }\n\n    if (openAiMajorVersion > 3) {\n      this.openaiApi = new OpenAIAPIv4(this.api_key);\n    } else {\n      this.openaiApi = new OpenAIAPIv3({\n        organization: this.org_id,\n        apiKey: this.api_key,\n      });\n    }\n  }\n\n  public async generate(texts: string[]): Promise<number[][]> {\n    await this.loadClient();\n\n    return await this.openaiApi!.createEmbedding({\n      model: this.model,\n      input: texts,\n      dimensions: this.dimensions,\n    }).catch((error: any) => {\n      throw error;\n    });\n  }\n\n  /** @ignore */\n  static async import(): Promise<{\n    // @ts-ignore\n    openai: typeof import(\"openai\");\n    version: string;\n  }> {\n    try {\n      // @ts-ignore\n      const { default: openai } = await import(\"openai\");\n      // @ts-ignore\n      const { VERSION } = await import(\"openai/version\");\n      // @ts-ignore\n      return { openai, version: VERSION };\n    } catch (e) {\n      throw new Error(\n        \"Please install the openai package to use the OpenAIEmbeddingFunction, e.g. `npm install openai`\",\n      );\n    }\n  }\n}\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\ninterface CohereAIAPI {\n  createEmbedding: (params: {\n    model: string;\n    input: string[];\n  }) => Promise<number[][]>;\n}\n\nclass CohereAISDK56 implements CohereAIAPI {\n  private cohereClient: any;\n  private apiKey: string;\n\n  constructor(configuration: { apiKey: string }) {\n    this.apiKey = configuration.apiKey;\n  }\n\n  private async loadClient() {\n    if (this.cohereClient) return;\n    //@ts-ignore\n    const { default: cohere } = await import(\"cohere-ai\");\n    // @ts-ignore\n    cohere.init(this.apiKey);\n    this.cohereClient = cohere;\n  }\n\n  public async createEmbedding(params: {\n    model: string;\n    input: string[];\n  }): Promise<number[][]> {\n    await this.loadClient();\n    return await this.cohereClient\n      .embed({\n        texts: params.input,\n        model: params.model,\n      })\n      .then((response: any) => {\n        return response.body.embeddings;\n      });\n  }\n}\n\nclass CohereAISDK7 implements CohereAIAPI {\n  private cohereClient: any;\n  private apiKey: string;\n\n  constructor(configuration: { apiKey: string }) {\n    this.apiKey = configuration.apiKey;\n  }\n\n  private async loadClient() {\n    if (this.cohereClient) return;\n    //@ts-ignore\n    const cohere = await import(\"cohere-ai\").then((cohere) => {\n      return cohere;\n    });\n    // @ts-ignore\n    this.cohereClient = new cohere.CohereClient({\n      token: this.apiKey,\n    });\n  }\n\n  public async createEmbedding(params: {\n    model: string;\n    input: string[];\n  }): Promise<number[][]> {\n    await this.loadClient();\n    return await this.cohereClient\n      .embed({ texts: params.input, model: params.model })\n      .then((response: any) => {\n        return response.embeddings;\n      });\n  }\n}\n\nexport class CohereEmbeddingFunction implements IEmbeddingFunction {\n  private cohereAiApi?: CohereAIAPI;\n  private model: string;\n  private apiKey: string;\n  constructor({\n    cohere_api_key,\n    model,\n  }: {\n    cohere_api_key: string;\n    model?: string;\n  }) {\n    this.model = model || \"large\";\n    this.apiKey = cohere_api_key;\n  }\n\n  private async initCohereClient() {\n    if (this.cohereAiApi) return;\n    try {\n      // @ts-ignore\n      this.cohereAiApi = await import(\"cohere-ai\").then((cohere) => {\n        // @ts-ignore\n        if (cohere.CohereClient) {\n          return new CohereAISDK7({ apiKey: this.apiKey });\n        } else {\n          return new CohereAISDK56({ apiKey: this.apiKey });\n        }\n      });\n    } catch (e) {\n      // @ts-ignore\n      if (e.code === \"MODULE_NOT_FOUND\") {\n        throw new Error(\n          \"Please install the cohere-ai package to use the CohereEmbeddingFunction, `npm install -S cohere-ai`\",\n        );\n      }\n      throw e;\n    }\n  }\n\n  public async generate(texts: string[]): Promise<number[][]> {\n    await this.initCohereClient();\n    // @ts-ignore\n    return await this.cohereAiApi.createEmbedding({\n      model: this.model,\n      input: texts,\n    });\n  }\n}\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\n// Dynamically import module\nlet TransformersApi: Promise<any>;\n\nexport class TransformersEmbeddingFunction implements IEmbeddingFunction {\n  private pipelinePromise?: Promise<any> | null;\n  private transformersApi: any;\n  private model: string;\n  private revision: string;\n  private quantized: boolean;\n  private progress_callback: Function | null;\n\n  /**\n   * TransformersEmbeddingFunction constructor.\n   * @param options The configuration options.\n   * @param options.model The model to use to calculate embeddings. Defaults to 'Xenova/all-MiniLM-L6-v2', which is an ONNX port of `sentence-transformers/all-MiniLM-L6-v2`.\n   * @param options.revision The specific model version to use (can be a branch, tag name, or commit id). Defaults to 'main'.\n   * @param options.quantized Whether to load the 8-bit quantized version of the model. Defaults to `false`.\n   * @param options.progress_callback If specified, this function will be called during model construction, to provide the user with progress updates.\n   */\n  constructor({\n    model = \"Xenova/all-MiniLM-L6-v2\",\n    revision = \"main\",\n    quantized = false,\n    progress_callback = null,\n  }: {\n    model?: string;\n    revision?: string;\n    quantized?: boolean;\n    progress_callback?: Function | null;\n  } = {}) {\n    this.model = model;\n    this.revision = revision;\n    this.quantized = quantized;\n    this.progress_callback = progress_callback;\n  }\n\n  public async generate(texts: string[]): Promise<number[][]> {\n    await this.loadClient();\n\n    // Store a promise that resolves to the pipeline\n    this.pipelinePromise = new Promise(async (resolve, reject) => {\n      try {\n        const pipeline = this.transformersApi;\n\n        const quantized = this.quantized;\n        const revision = this.revision;\n        const progress_callback = this.progress_callback;\n\n        resolve(\n          await pipeline(\"feature-extraction\", this.model, {\n            quantized,\n            revision,\n            progress_callback,\n          }),\n        );\n      } catch (e) {\n        reject(e);\n      }\n    });\n\n    let pipe = await this.pipelinePromise;\n    let output = await pipe(texts, { pooling: \"mean\", normalize: true });\n    return output.tolist();\n  }\n\n  private async loadClient() {\n    if (this.transformersApi) return;\n    try {\n      // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n      let { pipeline } = await TransformersEmbeddingFunction.import();\n      TransformersApi = pipeline;\n    } catch (_a) {\n      // @ts-ignore\n      if (_a.code === \"MODULE_NOT_FOUND\") {\n        throw new Error(\n          \"Please install the @xenova/transformers package to use the TransformersEmbeddingFunction, `npm install @xenova/transformers`\",\n        );\n      }\n      throw _a; // Re-throw other errors\n    }\n    this.transformersApi = TransformersApi;\n  }\n\n  /** @ignore */\n  static async import(): Promise<{\n    // @ts-ignore\n    pipeline: typeof import(\"@xenova/transformers\");\n  }> {\n    try {\n      // @ts-ignore\n      const { pipeline } = await import(\"@xenova/transformers\");\n      return { pipeline };\n    } catch (e) {\n      throw new Error(\n        \"Please install @xenova/transformers as a dependency with, e.g. `npm install @xenova/transformers`\",\n      );\n    }\n  }\n}\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\nlet CohereAiApi: any;\n\nexport class HuggingFaceEmbeddingServerFunction implements IEmbeddingFunction {\n  private url: string;\n\n  constructor({ url }: { url: string }) {\n    // we used to construct the client here, but we need to async import the types\n    // for the openai npm package, and the constructor can not be async\n    this.url = url;\n  }\n\n  public async generate(texts: string[]) {\n    const response = await fetch(this.url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ inputs: texts }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to generate embeddings: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data;\n  }\n}\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\nexport class JinaEmbeddingFunction implements IEmbeddingFunction {\n  private model_name: string;\n  private api_url: string;\n  private headers: { [key: string]: string };\n\n  constructor({\n    jinaai_api_key,\n    model_name,\n  }: {\n    jinaai_api_key: string;\n    model_name?: string;\n  }) {\n    this.model_name = model_name || \"jina-embeddings-v2-base-en\";\n    this.api_url = \"https://api.jina.ai/v1/embeddings\";\n    this.headers = {\n      Authorization: `Bearer ${jinaai_api_key}`,\n      \"Accept-Encoding\": \"identity\",\n      \"Content-Type\": \"application/json\",\n    };\n  }\n\n  public async generate(texts: string[]) {\n    try {\n      const response = await fetch(this.api_url, {\n        method: \"POST\",\n        headers: this.headers,\n        body: JSON.stringify({\n          input: texts,\n          model: this.model_name,\n        }),\n      });\n\n      const data = (await response.json()) as { data: any[]; detail: string };\n      if (!data || !data.data) {\n        throw new Error(data.detail);\n      }\n\n      const embeddings: any[] = data.data;\n      const sortedEmbeddings = embeddings.sort((a, b) => a.index - b.index);\n\n      return sortedEmbeddings.map((result) => result.embedding);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Error calling Jina AI API: ${error.message}`);\n      } else {\n        throw new Error(`Error calling Jina AI API: ${error}`);\n      }\n    }\n  }\n}\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\nlet googleGenAiApi: any;\n\nexport class GoogleGenerativeAiEmbeddingFunction implements IEmbeddingFunction {\n  private api_key: string;\n  private model: string;\n  private googleGenAiApi?: any;\n  private taskType: string;\n\n  constructor({\n    googleApiKey,\n    model,\n    taskType,\n  }: {\n    googleApiKey: string;\n    model?: string;\n    taskType?: string;\n  }) {\n    // we used to construct the client here, but we need to async import the types\n    // for the openai npm package, and the constructor can not be async\n    this.api_key = googleApiKey;\n    this.model = model || \"embedding-001\";\n    this.taskType = taskType || \"RETRIEVAL_DOCUMENT\";\n  }\n\n  private async loadClient() {\n    if (this.googleGenAiApi) return;\n    try {\n      // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n      const { googleGenAi } =\n        await GoogleGenerativeAiEmbeddingFunction.import();\n      googleGenAiApi = googleGenAi;\n      // googleGenAiApi.init(this.api_key);\n      googleGenAiApi = new googleGenAiApi(this.api_key);\n    } catch (_a) {\n      // @ts-ignore\n      if (_a.code === \"MODULE_NOT_FOUND\") {\n        throw new Error(\n          \"Please install the @google/generative-ai package to use the GoogleGenerativeAiEmbeddingFunction, `npm install @google/generative-ai`\",\n        );\n      }\n      throw _a; // Re-throw other errors\n    }\n    this.googleGenAiApi = googleGenAiApi;\n  }\n\n  public async generate(texts: string[]) {\n    await this.loadClient();\n    const model = this.googleGenAiApi.getGenerativeModel({ model: this.model });\n    const response = await model.batchEmbedContents({\n      requests: texts.map((t) => ({\n        content: { parts: [{ text: t }] },\n        taskType: this.taskType,\n      })),\n    });\n    const embeddings = response.embeddings.map((e: any) => e.values);\n\n    return embeddings;\n  }\n\n  /** @ignore */\n  static async import(): Promise<{\n    // @ts-ignore\n    googleGenAi: typeof import(\"@google/generative-ai\");\n  }> {\n    try {\n      // @ts-ignore\n      const { GoogleGenerativeAI } = await import(\"@google/generative-ai\");\n      const googleGenAi = GoogleGenerativeAI;\n      // @ts-ignore\n      return { googleGenAi };\n    } catch (e) {\n      throw new Error(\n        \"Please install @google/generative-ai as a dependency with, e.g. `npm install @google/generative-ai`\",\n      );\n    }\n  }\n}\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\nexport class OllamaEmbeddingFunction implements IEmbeddingFunction {\n  private readonly url: string;\n  private readonly model: string;\n\n  constructor({ url, model }: { url: string; model: string }) {\n    // we used to construct the client here, but we need to async import the types\n    // for the openai npm package, and the constructor can not be async\n    this.url = url;\n    this.model = model;\n  }\n\n  public async generate(texts: string[]) {\n    let embeddings: number[][] = [];\n    for (let text of texts) {\n      const response = await fetch(this.url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ model: this.model, prompt: text }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to generate embeddings: ${response.status} (${response.statusText})`,\n        );\n      }\n      let finalResponse = await response.json();\n      embeddings.push(finalResponse[\"embedding\"]);\n    }\n    return embeddings;\n  }\n}\n"],"mappings":"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","names":["fetch","fetch","Api","IncludeEnum","DEFAULT_TENANT","DEFAULT_DATABASE","cohere","TransformersApi"]}